def @main(%input_tensor:0: Tensor[(1, 300, 300, 3), uint8]) -> (Tensor[(1, 100, 4), float32], Tensor[(1, 100), float32], Tensor[(1, 100), float32], Tensor[(1), float32], Tensor[(1, 12804, 4), float32], Tensor[(1, 12804, 91), float32]) {
  %0 = strided_slice(%input_tensor:0, begin=[0], end=[1], strides=[1], axes=[0]) /* ty=Tensor[(1, 300, 300, 3), uint8] */;
  %1 = squeeze(%0, axis=[0]) /* ty=Tensor[(300, 300, 3), uint8] */;
  %2 = cast(%1, dtype="float32") /* ty=Tensor[(300, 300, 3), float32] */;
  %3 = expand_dims(%2, axis=0) /* ty=Tensor[(1, 300, 300, 3), float32] */;
  %4 = strided_slice(%3, begin=[0, 0, 0, 0], end=[1000000000, 1000000000, 1000000000, 1000000000], strides=[1, 1, 1, 1], axes=[0, 1, 2, 3]) /* ty=Tensor[(1, 300, 300, 3), float32] */;
  %5 = multiply(0.00784314f /* ty=float32 */, %4) /* ty=Tensor[(1, 300, 300, 3), float32] */;
  %6 = subtract(%5, 1f /* ty=float32 */) /* ty=Tensor[(1, 300, 300, 3), float32] */;
  %7 = split(%6, indices_or_sections=1) /* ty=(Tensor[(1, 300, 300, 3), float32],) */;
  %8 = %7.0;
  %9 = transpose(%8, axes=[0, 3, 1, 2]) /* ty=Tensor[(1, 3, 300, 300), float32] */;
  %10 = image.resize(%9, size=[320, 320], coordinate_transformation_mode="asymmetric", rounding_method="floor", bicubic_alpha=-0.75f) /* ty=Tensor[(1, 3, 320, 320), float32] */;
  %11 = squeeze(%10, axis=[0]) /* ty=Tensor[(3, 320, 320), float32] */;
  %12 = expand_dims(%11, axis=1) /* ty=Tensor[(3, 1, 320, 320), float32] */;
  %13 = strided_slice(%12, begin=[0], end=[1], strides=[1], axes=[1]) /* ty=Tensor[(3, 1, 320, 320), float32] */;
  %14 = reshape(%13, newshape=[1, 3, 320, 320]) /* ty=Tensor[(1, 3, 320, 320), float32] */;
  %15 = nn.conv2d(%14, meta[relay.Constant][0] /* ty=Tensor[(32, 3, 3, 3), float32] */, strides=[2, 2], padding=[0, 0, 1, 1], kernel_size=[3, 3]) /* ty=Tensor[(1, 32, 160, 160), float32] */;
  %16 = nn.bias_add(%15, meta[relay.Constant][1] /* ty=Tensor[(32), float32] */) /* ty=Tensor[(1, 32, 160, 160), float32] */;
  %17 = maximum(%16, 0f /* ty=float32 */) /* ty=Tensor[(1, 32, 160, 160), float32] */;
  %18 = minimum(%17, 6f /* ty=float32 */) /* ty=Tensor[(1, 32, 160, 160), float32] */;
  %19 = nn.conv2d(%18, meta[relay.Constant][2] /* ty=Tensor[(32, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=32, kernel_size=[3, 3]) /* ty=Tensor[(1, 32, 160, 160), float32] */;
  %20 = nn.bias_add(%19, meta[relay.Constant][3] /* ty=Tensor[(32), float32] */) /* ty=Tensor[(1, 32, 160, 160), float32] */;
  %21 = maximum(%20, 0f /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 32, 160, 160), float32] */;
  %22 = minimum(%21, 6f /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 32, 160, 160), float32] */;
  %23 = nn.conv2d(%22, meta[relay.Constant][4] /* ty=Tensor[(16, 32, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 16, 160, 160), float32] */;
  %24 = nn.bias_add(%23, meta[relay.Constant][5] /* ty=Tensor[(16), float32] */) /* ty=Tensor[(1, 16, 160, 160), float32] */;
  %25 = nn.conv2d(%24, meta[relay.Constant][6] /* ty=Tensor[(96, 16, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 160, 160), float32] */;
  %26 = nn.batch_norm(%25, meta[relay.Constant][7] /* ty=Tensor[(96), float32] */, meta[relay.Constant][8] /* ty=Tensor[(96), float32] */, meta[relay.Constant][9] /* ty=Tensor[(96), float32] */, meta[relay.Constant][10] /* ty=Tensor[(96), float32] */, epsilon=0.001f) /* ty=(Tensor[(1, 96, 160, 160), float32], Tensor[(96), float32], Tensor[(96), float32]) */;
  %27 = %26.0;
  %28 = maximum(%27, 0f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 96, 160, 160), float32] */;
  %29 = minimum(%28, 6f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 96, 160, 160), float32] */;
  %30 = nn.conv2d(%29, meta[relay.Constant][11] /* ty=Tensor[(96, 1, 3, 3), float32] */, strides=[2, 2], padding=[0, 0, 1, 1], groups=96, kernel_size=[3, 3]) /* ty=Tensor[(1, 96, 80, 80), float32] */;
  %31 = nn.bias_add(%30, meta[relay.Constant][12] /* ty=Tensor[(96), float32] */) /* ty=Tensor[(1, 96, 80, 80), float32] */;
  %32 = maximum(%31, 0f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 96, 80, 80), float32] */;
  %33 = minimum(%32, 6f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 96, 80, 80), float32] */;
  %34 = nn.conv2d(%33, meta[relay.Constant][13] /* ty=Tensor[(24, 96, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 24, 80, 80), float32] */;
  %35 = nn.bias_add(%34, meta[relay.Constant][14] /* ty=Tensor[(24), float32] */) /* ty=Tensor[(1, 24, 80, 80), float32] */;
  %36 = nn.conv2d(%35, meta[relay.Constant][15] /* ty=Tensor[(144, 24, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 144, 80, 80), float32] */;
  %37 = nn.batch_norm(%36, meta[relay.Constant][16] /* ty=Tensor[(144), float32] */, meta[relay.Constant][17] /* ty=Tensor[(144), float32] */, meta[relay.Constant][18] /* ty=Tensor[(144), float32] */, meta[relay.Constant][19] /* ty=Tensor[(144), float32] */, epsilon=0.001f) /* ty=(Tensor[(1, 144, 80, 80), float32], Tensor[(144), float32], Tensor[(144), float32]) */;
  %38 = %37.0;
  %39 = maximum(%38, 0f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 144, 80, 80), float32] */;
  %40 = minimum(%39, 6f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 144, 80, 80), float32] */;
  %41 = nn.conv2d(%40, meta[relay.Constant][20] /* ty=Tensor[(144, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=144, kernel_size=[3, 3]) /* ty=Tensor[(1, 144, 80, 80), float32] */;
  %42 = nn.bias_add(%41, meta[relay.Constant][21] /* ty=Tensor[(144), float32] */) /* ty=Tensor[(1, 144, 80, 80), float32] */;
  %43 = maximum(%42, 0f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 144, 80, 80), float32] */;
  %44 = minimum(%43, 6f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 144, 80, 80), float32] */;
  %45 = nn.conv2d(%44, meta[relay.Constant][22] /* ty=Tensor[(24, 144, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 24, 80, 80), float32] */;
  %46 = nn.bias_add(%45, meta[relay.Constant][23] /* ty=Tensor[(24), float32] */) /* ty=Tensor[(1, 24, 80, 80), float32] */;
  %47 = add(%35, %46) /* ty=Tensor[(1, 24, 80, 80), float32] */;
  %48 = nn.conv2d(%47, meta[relay.Constant][24] /* ty=Tensor[(144, 24, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 144, 80, 80), float32] */;
  %49 = nn.bias_add(%48, meta[relay.Constant][25] /* ty=Tensor[(144), float32] */) /* ty=Tensor[(1, 144, 80, 80), float32] */;
  %50 = maximum(%49, 0f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 144, 80, 80), float32] */;
  %51 = minimum(%50, 6f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 144, 80, 80), float32] */;
  %52 = nn.conv2d(%51, meta[relay.Constant][26] /* ty=Tensor[(144, 1, 3, 3), float32] */, strides=[2, 2], padding=[0, 0, 1, 1], groups=144, kernel_size=[3, 3]) /* ty=Tensor[(1, 144, 40, 40), float32] */;
  %53 = nn.bias_add(%52, meta[relay.Constant][27] /* ty=Tensor[(144), float32] */) /* ty=Tensor[(1, 144, 40, 40), float32] */;
  %54 = maximum(%53, 0f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 144, 40, 40), float32] */;
  %55 = minimum(%54, 6f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 144, 40, 40), float32] */;
  %56 = nn.conv2d(%55, meta[relay.Constant][28] /* ty=Tensor[(32, 144, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 40, 40), float32] */;
  %57 = nn.bias_add(%56, meta[relay.Constant][29] /* ty=Tensor[(32), float32] */) /* ty=Tensor[(1, 32, 40, 40), float32] */;
  %58 = nn.conv2d(%57, meta[relay.Constant][30] /* ty=Tensor[(192, 32, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %59 = nn.batch_norm(%58, meta[relay.Constant][31] /* ty=Tensor[(192), float32] */, meta[relay.Constant][32] /* ty=Tensor[(192), float32] */, meta[relay.Constant][33] /* ty=Tensor[(192), float32] */, meta[relay.Constant][34] /* ty=Tensor[(192), float32] */, epsilon=0.001f) /* ty=(Tensor[(1, 192, 40, 40), float32], Tensor[(192), float32], Tensor[(192), float32]) */;
  %60 = %59.0;
  %61 = maximum(%60, 0f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %62 = minimum(%61, 6f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %63 = nn.conv2d(%62, meta[relay.Constant][35] /* ty=Tensor[(192, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=192, kernel_size=[3, 3]) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %64 = nn.bias_add(%63, meta[relay.Constant][36] /* ty=Tensor[(192), float32] */) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %65 = maximum(%64, 0f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %66 = minimum(%65, 6f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %67 = nn.conv2d(%66, meta[relay.Constant][37] /* ty=Tensor[(32, 192, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 40, 40), float32] */;
  %68 = nn.bias_add(%67, meta[relay.Constant][38] /* ty=Tensor[(32), float32] */) /* ty=Tensor[(1, 32, 40, 40), float32] */;
  %69 = add(%57, %68) /* ty=Tensor[(1, 32, 40, 40), float32] */;
  %70 = nn.conv2d(%69, meta[relay.Constant][39] /* ty=Tensor[(192, 32, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %71 = nn.bias_add(%70, meta[relay.Constant][40] /* ty=Tensor[(192), float32] */) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %72 = maximum(%71, 0f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %73 = minimum(%72, 6f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %74 = nn.conv2d(%73, meta[relay.Constant][41] /* ty=Tensor[(192, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=192, kernel_size=[3, 3]) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %75 = nn.bias_add(%74, meta[relay.Constant][42] /* ty=Tensor[(192), float32] */) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %76 = maximum(%75, 0f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %77 = minimum(%76, 6f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %78 = nn.conv2d(%77, meta[relay.Constant][43] /* ty=Tensor[(32, 192, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 40, 40), float32] */;
  %79 = nn.bias_add(%78, meta[relay.Constant][44] /* ty=Tensor[(32), float32] */) /* ty=Tensor[(1, 32, 40, 40), float32] */;
  %80 = add(%69, %79) /* ty=Tensor[(1, 32, 40, 40), float32] */;
  %81 = nn.conv2d(%80, meta[relay.Constant][45] /* ty=Tensor[(192, 32, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %82 = nn.bias_add(%81, meta[relay.Constant][46] /* ty=Tensor[(192), float32] */) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %83 = maximum(%82, 0f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %84 = minimum(%83, 6f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 192, 40, 40), float32] */;
  %85 = nn.conv2d(%84, meta[relay.Constant][47] /* ty=Tensor[(192, 1, 3, 3), float32] */, strides=[2, 2], padding=[0, 0, 1, 1], groups=192, kernel_size=[3, 3]) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %86 = nn.bias_add(%85, meta[relay.Constant][48] /* ty=Tensor[(192), float32] */) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %87 = maximum(%86, 0f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %88 = minimum(%87, 6f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 192, 20, 20), float32] */;
  %89 = nn.conv2d(%88, meta[relay.Constant][49] /* ty=Tensor[(64, 192, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 20, 20), float32] */;
  %90 = nn.bias_add(%89, meta[relay.Constant][50] /* ty=Tensor[(64), float32] */) /* ty=Tensor[(1, 64, 20, 20), float32] */;
  %91 = nn.conv2d(%90, meta[relay.Constant][51] /* ty=Tensor[(384, 64, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 384, 20, 20), float32] */;
  %92 = nn.batch_norm(%91, meta[relay.Constant][52] /* ty=Tensor[(384), float32] */, meta[relay.Constant][53] /* ty=Tensor[(384), float32] */, meta[relay.Constant][54] /* ty=Tensor[(384), float32] */, meta[relay.Constant][55] /* ty=Tensor[(384), float32] */, epsilon=0.001f) /* ty=(Tensor[(1, 384, 20, 20), float32], Tensor[(384), float32], Tensor[(384), float32]) */;
  %93 = %92.0;
  %94 = maximum(%93, 0f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 384, 20, 20), float32] */;
  %95 = minimum(%94, 6f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 384, 20, 20), float32] */;
  %96 = nn.conv2d(%95, meta[relay.Constant][56] /* ty=Tensor[(384, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=384, kernel_size=[3, 3]) /* ty=Tensor[(1, 384, 20, 20), float32] */;
  %97 = nn.bias_add(%96, meta[relay.Constant][57] /* ty=Tensor[(384), float32] */) /* ty=Tensor[(1, 384, 20, 20), float32] */;
  %98 = maximum(%97, 0f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 384, 20, 20), float32] */;
  %99 = minimum(%98, 6f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 384, 20, 20), float32] */;
  %100 = nn.conv2d(%99, meta[relay.Constant][58] /* ty=Tensor[(64, 384, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 20, 20), float32] */;
  %101 = nn.bias_add(%100, meta[relay.Constant][59] /* ty=Tensor[(64), float32] */) /* ty=Tensor[(1, 64, 20, 20), float32] */;
  %102 = add(%90, %101) /* ty=Tensor[(1, 64, 20, 20), float32] */;
  %103 = nn.conv2d(%102, meta[relay.Constant][60] /* ty=Tensor[(384, 64, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 384, 20, 20), float32] */;
  %104 = nn.bias_add(%103, meta[relay.Constant][61] /* ty=Tensor[(384), float32] */) /* ty=Tensor[(1, 384, 20, 20), float32] */;
  %105 = maximum(%104, 0f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 384, 20, 20), float32] */;
  %106 = minimum(%105, 6f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 384, 20, 20), float32] */;
  %107 = nn.conv2d(%106, meta[relay.Constant][62] /* ty=Tensor[(384, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=384, kernel_size=[3, 3]) /* ty=Tensor[(1, 384, 20, 20), float32] */;
  %108 = nn.bias_add(%107, meta[relay.Constant][63] /* ty=Tensor[(384), float32] */) /* ty=Tensor[(1, 384, 20, 20), float32] */;
  %109 = maximum(%108, 0f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 384, 20, 20), float32] */;
  %110 = minimum(%109, 6f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 384, 20, 20), float32] */;
  %111 = nn.conv2d(%110, meta[relay.Constant][64] /* ty=Tensor[(64, 384, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 20, 20), float32] */;
  %112 = nn.bias_add(%111, meta[relay.Constant][65] /* ty=Tensor[(64), float32] */) /* ty=Tensor[(1, 64, 20, 20), float32] */;
  %113 = add(%102, %112) /* ty=Tensor[(1, 64, 20, 20), float32] */;
  %114 = nn.conv2d(%113, meta[relay.Constant][66] /* ty=Tensor[(384, 64, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 384, 20, 20), float32] */;
  %115 = nn.bias_add(%114, meta[relay.Constant][67] /* ty=Tensor[(384), float32] */) /* ty=Tensor[(1, 384, 20, 20), float32] */;
  %116 = maximum(%115, 0f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 384, 20, 20), float32] */;
  %117 = minimum(%116, 6f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 384, 20, 20), float32] */;
  %118 = nn.conv2d(%117, meta[relay.Constant][68] /* ty=Tensor[(384, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=384, kernel_size=[3, 3]) /* ty=Tensor[(1, 384, 20, 20), float32] */;
  %119 = nn.bias_add(%118, meta[relay.Constant][69] /* ty=Tensor[(384), float32] */) /* ty=Tensor[(1, 384, 20, 20), float32] */;
  %120 = maximum(%119, 0f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 384, 20, 20), float32] */;
  %121 = minimum(%120, 6f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 384, 20, 20), float32] */;
  %122 = nn.conv2d(%121, meta[relay.Constant][70] /* ty=Tensor[(64, 384, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 20, 20), float32] */;
  %123 = nn.bias_add(%122, meta[relay.Constant][71] /* ty=Tensor[(64), float32] */) /* ty=Tensor[(1, 64, 20, 20), float32] */;
  %124 = add(%113, %123) /* ty=Tensor[(1, 64, 20, 20), float32] */;
  %125 = nn.conv2d(%124, meta[relay.Constant][72] /* ty=Tensor[(384, 64, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 384, 20, 20), float32] */;
  %126 = nn.bias_add(%125, meta[relay.Constant][73] /* ty=Tensor[(384), float32] */) /* ty=Tensor[(1, 384, 20, 20), float32] */;
  %127 = maximum(%126, 0f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 384, 20, 20), float32] */;
  %128 = minimum(%127, 6f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 384, 20, 20), float32] */;
  %129 = nn.conv2d(%128, meta[relay.Constant][74] /* ty=Tensor[(384, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=384, kernel_size=[3, 3]) /* ty=Tensor[(1, 384, 20, 20), float32] */;
  %130 = nn.bias_add(%129, meta[relay.Constant][75] /* ty=Tensor[(384), float32] */) /* ty=Tensor[(1, 384, 20, 20), float32] */;
  %131 = maximum(%130, 0f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 384, 20, 20), float32] */;
  %132 = minimum(%131, 6f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 384, 20, 20), float32] */;
  %133 = nn.conv2d(%132, meta[relay.Constant][76] /* ty=Tensor[(96, 384, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %134 = nn.bias_add(%133, meta[relay.Constant][77] /* ty=Tensor[(96), float32] */) /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %135 = nn.conv2d(%134, meta[relay.Constant][78] /* ty=Tensor[(576, 96, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 576, 20, 20), float32] */;
  %136 = nn.batch_norm(%135, meta[relay.Constant][79] /* ty=Tensor[(576), float32] */, meta[relay.Constant][80] /* ty=Tensor[(576), float32] */, meta[relay.Constant][81] /* ty=Tensor[(576), float32] */, meta[relay.Constant][82] /* ty=Tensor[(576), float32] */, epsilon=0.001f) /* ty=(Tensor[(1, 576, 20, 20), float32], Tensor[(576), float32], Tensor[(576), float32]) */;
  %137 = %136.0;
  %138 = maximum(%137, 0f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 576, 20, 20), float32] */;
  %139 = minimum(%138, 6f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 576, 20, 20), float32] */;
  %140 = nn.conv2d(%139, meta[relay.Constant][83] /* ty=Tensor[(576, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=576, kernel_size=[3, 3]) /* ty=Tensor[(1, 576, 20, 20), float32] */;
  %141 = nn.bias_add(%140, meta[relay.Constant][84] /* ty=Tensor[(576), float32] */) /* ty=Tensor[(1, 576, 20, 20), float32] */;
  %142 = maximum(%141, 0f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 576, 20, 20), float32] */;
  %143 = minimum(%142, 6f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 576, 20, 20), float32] */;
  %144 = nn.conv2d(%143, meta[relay.Constant][85] /* ty=Tensor[(96, 576, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %145 = nn.bias_add(%144, meta[relay.Constant][86] /* ty=Tensor[(96), float32] */) /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %146 = add(%134, %145) /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %147 = nn.conv2d(%146, meta[relay.Constant][87] /* ty=Tensor[(576, 96, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 576, 20, 20), float32] */;
  %148 = nn.bias_add(%147, meta[relay.Constant][88] /* ty=Tensor[(576), float32] */) /* ty=Tensor[(1, 576, 20, 20), float32] */;
  %149 = maximum(%148, 0f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 576, 20, 20), float32] */;
  %150 = minimum(%149, 6f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 576, 20, 20), float32] */;
  %151 = nn.conv2d(%150, meta[relay.Constant][89] /* ty=Tensor[(576, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=576, kernel_size=[3, 3]) /* ty=Tensor[(1, 576, 20, 20), float32] */;
  %152 = nn.bias_add(%151, meta[relay.Constant][90] /* ty=Tensor[(576), float32] */) /* ty=Tensor[(1, 576, 20, 20), float32] */;
  %153 = maximum(%152, 0f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 576, 20, 20), float32] */;
  %154 = minimum(%153, 6f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 576, 20, 20), float32] */;
  %155 = nn.conv2d(%154, meta[relay.Constant][91] /* ty=Tensor[(96, 576, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %156 = nn.bias_add(%155, meta[relay.Constant][92] /* ty=Tensor[(96), float32] */) /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %157 = add(%146, %156) /* ty=Tensor[(1, 96, 20, 20), float32] */;
  %158 = nn.conv2d(%157, meta[relay.Constant][93] /* ty=Tensor[(576, 96, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 576, 20, 20), float32] */;
  %159 = nn.bias_add(%158, meta[relay.Constant][94] /* ty=Tensor[(576), float32] */) /* ty=Tensor[(1, 576, 20, 20), float32] */;
  %160 = maximum(%159, 0f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 576, 20, 20), float32] */;
  %161 = minimum(%160, 6f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 576, 20, 20), float32] */;
  %162 = nn.conv2d(%161, meta[relay.Constant][95] /* ty=Tensor[(576, 1, 3, 3), float32] */, strides=[2, 2], padding=[0, 0, 1, 1], groups=576, kernel_size=[3, 3]) /* ty=Tensor[(1, 576, 10, 10), float32] */;
  %163 = nn.bias_add(%162, meta[relay.Constant][96] /* ty=Tensor[(576), float32] */) /* ty=Tensor[(1, 576, 10, 10), float32] */;
  %164 = maximum(%163, 0f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 576, 10, 10), float32] */;
  %165 = minimum(%164, 6f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 576, 10, 10), float32] */;
  %166 = nn.conv2d(%165, meta[relay.Constant][97] /* ty=Tensor[(160, 576, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 160, 10, 10), float32] */;
  %167 = nn.bias_add(%166, meta[relay.Constant][98] /* ty=Tensor[(160), float32] */) /* ty=Tensor[(1, 160, 10, 10), float32] */;
  %168 = nn.conv2d(%167, meta[relay.Constant][99] /* ty=Tensor[(960, 160, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 960, 10, 10), float32] */;
  %169 = nn.batch_norm(%168, meta[relay.Constant][100] /* ty=Tensor[(960), float32] */, meta[relay.Constant][101] /* ty=Tensor[(960), float32] */, meta[relay.Constant][102] /* ty=Tensor[(960), float32] */, meta[relay.Constant][103] /* ty=Tensor[(960), float32] */, epsilon=0.001f) /* ty=(Tensor[(1, 960, 10, 10), float32], Tensor[(960), float32], Tensor[(960), float32]) */;
  %170 = %169.0;
  %171 = maximum(%170, 0f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 960, 10, 10), float32] */;
  %172 = minimum(%171, 6f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 960, 10, 10), float32] */;
  %173 = nn.conv2d(%172, meta[relay.Constant][104] /* ty=Tensor[(960, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=960, kernel_size=[3, 3]) /* ty=Tensor[(1, 960, 10, 10), float32] */;
  %174 = nn.bias_add(%173, meta[relay.Constant][105] /* ty=Tensor[(960), float32] */) /* ty=Tensor[(1, 960, 10, 10), float32] */;
  %175 = maximum(%174, 0f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 960, 10, 10), float32] */;
  %176 = minimum(%175, 6f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 960, 10, 10), float32] */;
  %177 = nn.conv2d(%176, meta[relay.Constant][106] /* ty=Tensor[(160, 960, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 160, 10, 10), float32] */;
  %178 = nn.bias_add(%177, meta[relay.Constant][107] /* ty=Tensor[(160), float32] */) /* ty=Tensor[(1, 160, 10, 10), float32] */;
  %179 = add(%167, %178) /* ty=Tensor[(1, 160, 10, 10), float32] */;
  %180 = nn.conv2d(%179, meta[relay.Constant][108] /* ty=Tensor[(960, 160, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 960, 10, 10), float32] */;
  %181 = nn.bias_add(%180, meta[relay.Constant][109] /* ty=Tensor[(960), float32] */) /* ty=Tensor[(1, 960, 10, 10), float32] */;
  %182 = maximum(%181, 0f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 960, 10, 10), float32] */;
  %183 = minimum(%182, 6f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 960, 10, 10), float32] */;
  %184 = nn.conv2d(%183, meta[relay.Constant][110] /* ty=Tensor[(960, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=960, kernel_size=[3, 3]) /* ty=Tensor[(1, 960, 10, 10), float32] */;
  %185 = nn.bias_add(%184, meta[relay.Constant][111] /* ty=Tensor[(960), float32] */) /* ty=Tensor[(1, 960, 10, 10), float32] */;
  %186 = maximum(%185, 0f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 960, 10, 10), float32] */;
  %187 = minimum(%186, 6f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 960, 10, 10), float32] */;
  %188 = nn.conv2d(%187, meta[relay.Constant][112] /* ty=Tensor[(160, 960, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 160, 10, 10), float32] */;
  %189 = nn.bias_add(%188, meta[relay.Constant][113] /* ty=Tensor[(160), float32] */) /* ty=Tensor[(1, 160, 10, 10), float32] */;
  %190 = add(%179, %189) /* ty=Tensor[(1, 160, 10, 10), float32] */;
  %191 = nn.conv2d(%190, meta[relay.Constant][114] /* ty=Tensor[(960, 160, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 960, 10, 10), float32] */;
  %192 = nn.bias_add(%191, meta[relay.Constant][115] /* ty=Tensor[(960), float32] */) /* ty=Tensor[(1, 960, 10, 10), float32] */;
  %193 = maximum(%192, 0f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 960, 10, 10), float32] */;
  %194 = minimum(%193, 6f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 960, 10, 10), float32] */;
  %195 = nn.conv2d(%194, meta[relay.Constant][116] /* ty=Tensor[(960, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=960, kernel_size=[3, 3]) /* ty=Tensor[(1, 960, 10, 10), float32] */;
  %196 = nn.bias_add(%195, meta[relay.Constant][117] /* ty=Tensor[(960), float32] */) /* ty=Tensor[(1, 960, 10, 10), float32] */;
  %197 = maximum(%196, 0f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 960, 10, 10), float32] */;
  %198 = minimum(%197, 6f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 960, 10, 10), float32] */;
  %199 = nn.conv2d(%198, meta[relay.Constant][118] /* ty=Tensor[(320, 960, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 320, 10, 10), float32] */;
  %200 = nn.bias_add(%199, meta[relay.Constant][119] /* ty=Tensor[(320), float32] */) /* ty=Tensor[(1, 320, 10, 10), float32] */;
  %201 = nn.conv2d(%200, meta[relay.Constant][120] /* ty=Tensor[(1280, 320, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 1280, 10, 10), float32] */;
  %202 = nn.batch_norm(%201, meta[relay.Constant][121] /* ty=Tensor[(1280), float32] */, meta[relay.Constant][122] /* ty=Tensor[(1280), float32] */, meta[relay.Constant][123] /* ty=Tensor[(1280), float32] */, meta[relay.Constant][124] /* ty=Tensor[(1280), float32] */, epsilon=0.001f) /* ty=(Tensor[(1, 1280, 10, 10), float32], Tensor[(1280), float32], Tensor[(1280), float32]) */;
  %203 = %202.0;
  %204 = maximum(%203, 0f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 1280, 10, 10), float32] */;
  %205 = minimum(%204, 6f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 1280, 10, 10), float32] */;
  %206 = nn.conv2d(%205, meta[relay.Constant][125] /* ty=Tensor[(128, 1280, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 10, 10), float32] */;
  %207 = nn.bias_add(%206, meta[relay.Constant][126] /* ty=Tensor[(128), float32] */) /* ty=Tensor[(1, 128, 10, 10), float32] */;
  %208 = expand_dims(%207, axis=1) /* ty=Tensor[(1, 1, 128, 10, 10), float32] */;
  %209 = (%208, %208);
  %210 = concatenate(%209, axis=1) /* ty=Tensor[(1, 2, 128, 10, 10), float32] */;
  %211 = expand_dims(%210, axis=4) /* ty=Tensor[(1, 2, 128, 10, 1, 10), float32] */;
  %212 = (%211, %211);
  %213 = concatenate(%212, axis=4) /* ty=Tensor[(1, 2, 128, 10, 2, 10), float32] */;
  %214 = transpose(%213, axes=[0, 3, 4, 5, 1, 2]) /* ty=Tensor[(1, 10, 2, 10, 2, 128), float32] */;
  %215 = reshape(%214, newshape=[1, 20, 20, 128]) /* ty=Tensor[(1, 20, 20, 128), float32] */;
  %216 = nn.conv2d(%157, meta[relay.Constant][127] /* ty=Tensor[(128, 96, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %217 = transpose(%215, axes=[0, 3, 1, 2]) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %218 = nn.bias_add(%216, meta[relay.Constant][128] /* ty=Tensor[(128), float32] */) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %219 = add(%217, %218) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %220 = nn.conv2d(%219, meta[relay.Constant][129] /* ty=Tensor[(128, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %221 = nn.conv2d(%220, meta[relay.Constant][130] /* ty=Tensor[(128, 128, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %222 = nn.batch_norm(%221, meta[relay.Constant][131] /* ty=Tensor[(128), float32] */, meta[relay.Constant][132] /* ty=Tensor[(128), float32] */, meta[relay.Constant][133] /* ty=Tensor[(128), float32] */, meta[relay.Constant][134] /* ty=Tensor[(128), float32] */, epsilon=0.001f) /* ty=(Tensor[(1, 128, 20, 20), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %223 = %222.0;
  %224 = maximum(%223, 0f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %225 = minimum(%224, 6f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %226 = expand_dims(%225, axis=1) /* ty=Tensor[(1, 1, 128, 20, 20), float32] */;
  %227 = (%226, %226);
  %228 = concatenate(%227, axis=1) /* ty=Tensor[(1, 2, 128, 20, 20), float32] */;
  %229 = expand_dims(%228, axis=4) /* ty=Tensor[(1, 2, 128, 20, 1, 20), float32] */;
  %230 = (%229, %229);
  %231 = concatenate(%230, axis=4) /* ty=Tensor[(1, 2, 128, 20, 2, 20), float32] */;
  %232 = transpose(%231, axes=[0, 3, 4, 5, 1, 2]) /* ty=Tensor[(1, 20, 2, 20, 2, 128), float32] */;
  %233 = reshape(%232, newshape=[1, 40, 40, 128]) /* ty=Tensor[(1, 40, 40, 128), float32] */;
  %234 = nn.conv2d(%80, meta[relay.Constant][135] /* ty=Tensor[(128, 32, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %235 = transpose(%233, axes=[0, 3, 1, 2]) /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %236 = nn.bias_add(%234, meta[relay.Constant][136] /* ty=Tensor[(128), float32] */) /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %237 = add(%235, %236) /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %238 = nn.conv2d(%237, meta[relay.Constant][137] /* ty=Tensor[(128, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %239 = nn.conv2d(%238, meta[relay.Constant][138] /* ty=Tensor[(128, 128, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %240 = nn.batch_norm(%239, meta[relay.Constant][139] /* ty=Tensor[(128), float32] */, meta[relay.Constant][140] /* ty=Tensor[(128), float32] */, meta[relay.Constant][141] /* ty=Tensor[(128), float32] */, meta[relay.Constant][142] /* ty=Tensor[(128), float32] */, epsilon=0.001f) /* ty=(Tensor[(1, 128, 40, 40), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %241 = %240.0;
  %242 = maximum(%241, 0f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %243 = minimum(%242, 6f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %244 = nn.conv2d(%243, meta[relay.Constant][143] /* ty=Tensor[(128, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %245 = nn.conv2d(%244, meta[relay.Constant][144] /* ty=Tensor[(128, 128, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %246 = nn.batch_norm(%245, meta[relay.Constant][145] /* ty=Tensor[(128), float32] */, meta[relay.Constant][146] /* ty=Tensor[(128), float32] */, meta[relay.Constant][147] /* ty=Tensor[(128), float32] */, meta[relay.Constant][148] /* ty=Tensor[(128), float32] */, epsilon=0.001f) /* ty=(Tensor[(1, 128, 40, 40), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %247 = %246.0;
  %248 = maximum(%247, 0f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %249 = minimum(%248, 6f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %250 = nn.conv2d(%249, meta[relay.Constant][149] /* ty=Tensor[(128, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %251 = nn.conv2d(%250, meta[relay.Constant][150] /* ty=Tensor[(128, 128, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %252 = nn.batch_norm(%251, meta[relay.Constant][151] /* ty=Tensor[(128), float32] */, meta[relay.Constant][152] /* ty=Tensor[(128), float32] */, meta[relay.Constant][153] /* ty=Tensor[(128), float32] */, meta[relay.Constant][154] /* ty=Tensor[(128), float32] */, epsilon=0.001f) /* ty=(Tensor[(1, 128, 40, 40), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %253 = %252.0;
  %254 = maximum(%253, 0f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %255 = minimum(%254, 6f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %256 = nn.conv2d(%255, meta[relay.Constant][155] /* ty=Tensor[(128, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %257 = nn.conv2d(%256, meta[relay.Constant][156] /* ty=Tensor[(128, 128, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %258 = nn.batch_norm(%257, meta[relay.Constant][157] /* ty=Tensor[(128), float32] */, meta[relay.Constant][158] /* ty=Tensor[(128), float32] */, meta[relay.Constant][159] /* ty=Tensor[(128), float32] */, meta[relay.Constant][160] /* ty=Tensor[(128), float32] */, epsilon=0.001f) /* ty=(Tensor[(1, 128, 40, 40), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %259 = %258.0;
  %260 = maximum(%259, 0f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %261 = minimum(%260, 6f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %262 = nn.conv2d(%261, meta[relay.Constant][161] /* ty=Tensor[(128, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %263 = nn.conv2d(%262, meta[relay.Constant][162] /* ty=Tensor[(128, 128, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %264 = nn.batch_norm(%263, meta[relay.Constant][163] /* ty=Tensor[(128), float32] */, meta[relay.Constant][164] /* ty=Tensor[(128), float32] */, meta[relay.Constant][165] /* ty=Tensor[(128), float32] */, meta[relay.Constant][166] /* ty=Tensor[(128), float32] */, epsilon=0.001f) /* ty=(Tensor[(1, 128, 40, 40), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %265 = %264.0;
  %266 = maximum(%265, 0f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %267 = minimum(%266, 6f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %268 = nn.conv2d(%267, meta[relay.Constant][167] /* ty=Tensor[(128, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %269 = nn.conv2d(%268, meta[relay.Constant][168] /* ty=Tensor[(24, 128, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %270 = nn.bias_add(%269, meta[relay.Constant][169] /* ty=Tensor[(24), float32] */) /* ty=Tensor[(1, 24, 40, 40), float32] */;
  %271 = transpose(%270, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 40, 40, 24), float32] */;
  %272 = nn.conv2d(%225, meta[relay.Constant][143] /* ty=Tensor[(128, 1, 3, 3), float32] */ /* ty=Tensor[(128, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %273 = nn.conv2d(%272, meta[relay.Constant][144] /* ty=Tensor[(128, 128, 1, 1), float32] */ /* ty=Tensor[(128, 128, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %274 = nn.batch_norm(%273, meta[relay.Constant][170] /* ty=Tensor[(128), float32] */, meta[relay.Constant][171] /* ty=Tensor[(128), float32] */, meta[relay.Constant][172] /* ty=Tensor[(128), float32] */, meta[relay.Constant][173] /* ty=Tensor[(128), float32] */, epsilon=0.001f) /* ty=(Tensor[(1, 128, 20, 20), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %275 = %274.0;
  %276 = maximum(%275, 0f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %277 = minimum(%276, 6f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %278 = nn.conv2d(%277, meta[relay.Constant][149] /* ty=Tensor[(128, 1, 3, 3), float32] */ /* ty=Tensor[(128, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %279 = nn.conv2d(%278, meta[relay.Constant][150] /* ty=Tensor[(128, 128, 1, 1), float32] */ /* ty=Tensor[(128, 128, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %280 = nn.batch_norm(%279, meta[relay.Constant][174] /* ty=Tensor[(128), float32] */, meta[relay.Constant][175] /* ty=Tensor[(128), float32] */, meta[relay.Constant][176] /* ty=Tensor[(128), float32] */, meta[relay.Constant][177] /* ty=Tensor[(128), float32] */, epsilon=0.001f) /* ty=(Tensor[(1, 128, 20, 20), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %281 = %280.0;
  %282 = maximum(%281, 0f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %283 = minimum(%282, 6f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %284 = nn.conv2d(%283, meta[relay.Constant][155] /* ty=Tensor[(128, 1, 3, 3), float32] */ /* ty=Tensor[(128, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %285 = nn.conv2d(%284, meta[relay.Constant][156] /* ty=Tensor[(128, 128, 1, 1), float32] */ /* ty=Tensor[(128, 128, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %286 = nn.batch_norm(%285, meta[relay.Constant][178] /* ty=Tensor[(128), float32] */, meta[relay.Constant][179] /* ty=Tensor[(128), float32] */, meta[relay.Constant][180] /* ty=Tensor[(128), float32] */, meta[relay.Constant][181] /* ty=Tensor[(128), float32] */, epsilon=0.001f) /* ty=(Tensor[(1, 128, 20, 20), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %287 = %286.0;
  %288 = maximum(%287, 0f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %289 = minimum(%288, 6f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %290 = nn.conv2d(%289, meta[relay.Constant][161] /* ty=Tensor[(128, 1, 3, 3), float32] */ /* ty=Tensor[(128, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %291 = nn.conv2d(%290, meta[relay.Constant][162] /* ty=Tensor[(128, 128, 1, 1), float32] */ /* ty=Tensor[(128, 128, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %292 = nn.batch_norm(%291, meta[relay.Constant][182] /* ty=Tensor[(128), float32] */, meta[relay.Constant][183] /* ty=Tensor[(128), float32] */, meta[relay.Constant][184] /* ty=Tensor[(128), float32] */, meta[relay.Constant][185] /* ty=Tensor[(128), float32] */, epsilon=0.001f) /* ty=(Tensor[(1, 128, 20, 20), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %293 = %292.0;
  %294 = maximum(%293, 0f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %295 = minimum(%294, 6f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %296 = nn.conv2d(%295, meta[relay.Constant][167] /* ty=Tensor[(128, 1, 3, 3), float32] */ /* ty=Tensor[(128, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %297 = nn.conv2d(%296, meta[relay.Constant][168] /* ty=Tensor[(24, 128, 1, 1), float32] */ /* ty=Tensor[(24, 128, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 24, 20, 20), float32] */;
  %298 = nn.bias_add(%297, meta[relay.Constant][169] /* ty=Tensor[(24), float32] */ /* ty=Tensor[(24), float32] */) /* ty=Tensor[(1, 24, 20, 20), float32] */;
  %299 = transpose(%298, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 20, 20, 24), float32] */;
  %300 = nn.conv2d(%207, meta[relay.Constant][143] /* ty=Tensor[(128, 1, 3, 3), float32] */ /* ty=Tensor[(128, 1, 3, 3), float32] */ /* ty=Tensor[(128, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 10, 10), float32] */;
  %301 = nn.conv2d(%300, meta[relay.Constant][144] /* ty=Tensor[(128, 128, 1, 1), float32] */ /* ty=Tensor[(128, 128, 1, 1), float32] */ /* ty=Tensor[(128, 128, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 10, 10), float32] */;
  %302 = nn.batch_norm(%301, meta[relay.Constant][186] /* ty=Tensor[(128), float32] */, meta[relay.Constant][187] /* ty=Tensor[(128), float32] */, meta[relay.Constant][188] /* ty=Tensor[(128), float32] */, meta[relay.Constant][189] /* ty=Tensor[(128), float32] */, epsilon=0.001f) /* ty=(Tensor[(1, 128, 10, 10), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %303 = %302.0;
  %304 = maximum(%303, 0f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 128, 10, 10), float32] */;
  %305 = minimum(%304, 6f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 128, 10, 10), float32] */;
  %306 = nn.conv2d(%305, meta[relay.Constant][149] /* ty=Tensor[(128, 1, 3, 3), float32] */ /* ty=Tensor[(128, 1, 3, 3), float32] */ /* ty=Tensor[(128, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 10, 10), float32] */;
  %307 = nn.conv2d(%306, meta[relay.Constant][150] /* ty=Tensor[(128, 128, 1, 1), float32] */ /* ty=Tensor[(128, 128, 1, 1), float32] */ /* ty=Tensor[(128, 128, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 10, 10), float32] */;
  %308 = nn.batch_norm(%307, meta[relay.Constant][190] /* ty=Tensor[(128), float32] */, meta[relay.Constant][191] /* ty=Tensor[(128), float32] */, meta[relay.Constant][192] /* ty=Tensor[(128), float32] */, meta[relay.Constant][193] /* ty=Tensor[(128), float32] */, epsilon=0.001f) /* ty=(Tensor[(1, 128, 10, 10), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %309 = %308.0;
  %310 = maximum(%309, 0f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 128, 10, 10), float32] */;
  %311 = minimum(%310, 6f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 128, 10, 10), float32] */;
  %312 = nn.conv2d(%311, meta[relay.Constant][155] /* ty=Tensor[(128, 1, 3, 3), float32] */ /* ty=Tensor[(128, 1, 3, 3), float32] */ /* ty=Tensor[(128, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 10, 10), float32] */;
  %313 = nn.conv2d(%312, meta[relay.Constant][156] /* ty=Tensor[(128, 128, 1, 1), float32] */ /* ty=Tensor[(128, 128, 1, 1), float32] */ /* ty=Tensor[(128, 128, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 10, 10), float32] */;
  %314 = nn.batch_norm(%313, meta[relay.Constant][194] /* ty=Tensor[(128), float32] */, meta[relay.Constant][195] /* ty=Tensor[(128), float32] */, meta[relay.Constant][196] /* ty=Tensor[(128), float32] */, meta[relay.Constant][197] /* ty=Tensor[(128), float32] */, epsilon=0.001f) /* ty=(Tensor[(1, 128, 10, 10), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %315 = %314.0;
  %316 = maximum(%315, 0f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 128, 10, 10), float32] */;
  %317 = minimum(%316, 6f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 128, 10, 10), float32] */;
  %318 = nn.conv2d(%317, meta[relay.Constant][161] /* ty=Tensor[(128, 1, 3, 3), float32] */ /* ty=Tensor[(128, 1, 3, 3), float32] */ /* ty=Tensor[(128, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 10, 10), float32] */;
  %319 = nn.conv2d(%318, meta[relay.Constant][162] /* ty=Tensor[(128, 128, 1, 1), float32] */ /* ty=Tensor[(128, 128, 1, 1), float32] */ /* ty=Tensor[(128, 128, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 10, 10), float32] */;
  %320 = nn.batch_norm(%319, meta[relay.Constant][198] /* ty=Tensor[(128), float32] */, meta[relay.Constant][199] /* ty=Tensor[(128), float32] */, meta[relay.Constant][200] /* ty=Tensor[(128), float32] */, meta[relay.Constant][201] /* ty=Tensor[(128), float32] */, epsilon=0.001f) /* ty=(Tensor[(1, 128, 10, 10), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %321 = %320.0;
  %322 = maximum(%321, 0f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 128, 10, 10), float32] */;
  %323 = minimum(%322, 6f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 128, 10, 10), float32] */;
  %324 = nn.conv2d(%323, meta[relay.Constant][167] /* ty=Tensor[(128, 1, 3, 3), float32] */ /* ty=Tensor[(128, 1, 3, 3), float32] */ /* ty=Tensor[(128, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 10, 10), float32] */;
  %325 = nn.conv2d(%324, meta[relay.Constant][168] /* ty=Tensor[(24, 128, 1, 1), float32] */ /* ty=Tensor[(24, 128, 1, 1), float32] */ /* ty=Tensor[(24, 128, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 24, 10, 10), float32] */;
  %326 = nn.bias_add(%325, meta[relay.Constant][169] /* ty=Tensor[(24), float32] */ /* ty=Tensor[(24), float32] */ /* ty=Tensor[(24), float32] */) /* ty=Tensor[(1, 24, 10, 10), float32] */;
  %327 = transpose(%326, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 10, 10, 24), float32] */;
  %328 = nn.conv2d(%207, meta[relay.Constant][202] /* ty=Tensor[(128, 1, 3, 3), float32] */, strides=[2, 2], padding=[0, 0, 1, 1], groups=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 5, 5), float32] */;
  %329 = nn.conv2d(%328, meta[relay.Constant][203] /* ty=Tensor[(128, 128, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 5, 5), float32] */;
  %330 = nn.batch_norm(%329, meta[relay.Constant][204] /* ty=Tensor[(128), float32] */, meta[relay.Constant][205] /* ty=Tensor[(128), float32] */, meta[relay.Constant][206] /* ty=Tensor[(128), float32] */, meta[relay.Constant][207] /* ty=Tensor[(128), float32] */, epsilon=0.001f) /* ty=(Tensor[(1, 128, 5, 5), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %331 = %330.0;
  %332 = maximum(%331, 0f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 128, 5, 5), float32] */;
  %333 = minimum(%332, 6f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 128, 5, 5), float32] */;
  %334 = nn.conv2d(%333, meta[relay.Constant][143] /* ty=Tensor[(128, 1, 3, 3), float32] */ /* ty=Tensor[(128, 1, 3, 3), float32] */ /* ty=Tensor[(128, 1, 3, 3), float32] */ /* ty=Tensor[(128, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 5, 5), float32] */;
  %335 = nn.conv2d(%334, meta[relay.Constant][144] /* ty=Tensor[(128, 128, 1, 1), float32] */ /* ty=Tensor[(128, 128, 1, 1), float32] */ /* ty=Tensor[(128, 128, 1, 1), float32] */ /* ty=Tensor[(128, 128, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 5, 5), float32] */;
  %336 = nn.batch_norm(%335, meta[relay.Constant][208] /* ty=Tensor[(128), float32] */, meta[relay.Constant][209] /* ty=Tensor[(128), float32] */, meta[relay.Constant][210] /* ty=Tensor[(128), float32] */, meta[relay.Constant][211] /* ty=Tensor[(128), float32] */, epsilon=0.001f) /* ty=(Tensor[(1, 128, 5, 5), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %337 = %336.0;
  %338 = maximum(%337, 0f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 128, 5, 5), float32] */;
  %339 = minimum(%338, 6f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 128, 5, 5), float32] */;
  %340 = nn.conv2d(%339, meta[relay.Constant][149] /* ty=Tensor[(128, 1, 3, 3), float32] */ /* ty=Tensor[(128, 1, 3, 3), float32] */ /* ty=Tensor[(128, 1, 3, 3), float32] */ /* ty=Tensor[(128, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 5, 5), float32] */;
  %341 = nn.conv2d(%340, meta[relay.Constant][150] /* ty=Tensor[(128, 128, 1, 1), float32] */ /* ty=Tensor[(128, 128, 1, 1), float32] */ /* ty=Tensor[(128, 128, 1, 1), float32] */ /* ty=Tensor[(128, 128, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 5, 5), float32] */;
  %342 = nn.batch_norm(%341, meta[relay.Constant][212] /* ty=Tensor[(128), float32] */, meta[relay.Constant][213] /* ty=Tensor[(128), float32] */, meta[relay.Constant][214] /* ty=Tensor[(128), float32] */, meta[relay.Constant][215] /* ty=Tensor[(128), float32] */, epsilon=0.001f) /* ty=(Tensor[(1, 128, 5, 5), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %343 = %342.0;
  %344 = maximum(%343, 0f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 128, 5, 5), float32] */;
  %345 = minimum(%344, 6f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 128, 5, 5), float32] */;
  %346 = nn.conv2d(%345, meta[relay.Constant][155] /* ty=Tensor[(128, 1, 3, 3), float32] */ /* ty=Tensor[(128, 1, 3, 3), float32] */ /* ty=Tensor[(128, 1, 3, 3), float32] */ /* ty=Tensor[(128, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 5, 5), float32] */;
  %347 = nn.conv2d(%346, meta[relay.Constant][156] /* ty=Tensor[(128, 128, 1, 1), float32] */ /* ty=Tensor[(128, 128, 1, 1), float32] */ /* ty=Tensor[(128, 128, 1, 1), float32] */ /* ty=Tensor[(128, 128, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 5, 5), float32] */;
  %348 = nn.batch_norm(%347, meta[relay.Constant][216] /* ty=Tensor[(128), float32] */, meta[relay.Constant][217] /* ty=Tensor[(128), float32] */, meta[relay.Constant][218] /* ty=Tensor[(128), float32] */, meta[relay.Constant][219] /* ty=Tensor[(128), float32] */, epsilon=0.001f) /* ty=(Tensor[(1, 128, 5, 5), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %349 = %348.0;
  %350 = maximum(%349, 0f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 128, 5, 5), float32] */;
  %351 = minimum(%350, 6f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 128, 5, 5), float32] */;
  %352 = nn.conv2d(%351, meta[relay.Constant][161] /* ty=Tensor[(128, 1, 3, 3), float32] */ /* ty=Tensor[(128, 1, 3, 3), float32] */ /* ty=Tensor[(128, 1, 3, 3), float32] */ /* ty=Tensor[(128, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 5, 5), float32] */;
  %353 = nn.conv2d(%352, meta[relay.Constant][162] /* ty=Tensor[(128, 128, 1, 1), float32] */ /* ty=Tensor[(128, 128, 1, 1), float32] */ /* ty=Tensor[(128, 128, 1, 1), float32] */ /* ty=Tensor[(128, 128, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 5, 5), float32] */;
  %354 = nn.batch_norm(%353, meta[relay.Constant][220] /* ty=Tensor[(128), float32] */, meta[relay.Constant][221] /* ty=Tensor[(128), float32] */, meta[relay.Constant][222] /* ty=Tensor[(128), float32] */, meta[relay.Constant][223] /* ty=Tensor[(128), float32] */, epsilon=0.001f) /* ty=(Tensor[(1, 128, 5, 5), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %355 = %354.0;
  %356 = maximum(%355, 0f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 128, 5, 5), float32] */;
  %357 = minimum(%356, 6f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 128, 5, 5), float32] */;
  %358 = nn.conv2d(%357, meta[relay.Constant][167] /* ty=Tensor[(128, 1, 3, 3), float32] */ /* ty=Tensor[(128, 1, 3, 3), float32] */ /* ty=Tensor[(128, 1, 3, 3), float32] */ /* ty=Tensor[(128, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 5, 5), float32] */;
  %359 = nn.conv2d(%358, meta[relay.Constant][168] /* ty=Tensor[(24, 128, 1, 1), float32] */ /* ty=Tensor[(24, 128, 1, 1), float32] */ /* ty=Tensor[(24, 128, 1, 1), float32] */ /* ty=Tensor[(24, 128, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 24, 5, 5), float32] */;
  %360 = nn.bias_add(%359, meta[relay.Constant][169] /* ty=Tensor[(24), float32] */ /* ty=Tensor[(24), float32] */ /* ty=Tensor[(24), float32] */ /* ty=Tensor[(24), float32] */) /* ty=Tensor[(1, 24, 5, 5), float32] */;
  %361 = transpose(%360, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 5, 5, 24), float32] */;
  %362 = nn.conv2d(%333, meta[relay.Constant][224] /* ty=Tensor[(128, 1, 3, 3), float32] */, strides=[2, 2], padding=[1, 1, 1, 1], groups=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 3, 3), float32] */;
  %363 = nn.conv2d(%362, meta[relay.Constant][225] /* ty=Tensor[(128, 128, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 3, 3), float32] */;
  %364 = nn.batch_norm(%363, meta[relay.Constant][226] /* ty=Tensor[(128), float32] */, meta[relay.Constant][227] /* ty=Tensor[(128), float32] */, meta[relay.Constant][228] /* ty=Tensor[(128), float32] */, meta[relay.Constant][229] /* ty=Tensor[(128), float32] */, epsilon=0.001f) /* ty=(Tensor[(1, 128, 3, 3), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %365 = %364.0;
  %366 = maximum(%365, 0f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 128, 3, 3), float32] */;
  %367 = minimum(%366, 6f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 128, 3, 3), float32] */;
  %368 = nn.conv2d(%367, meta[relay.Constant][143] /* ty=Tensor[(128, 1, 3, 3), float32] */ /* ty=Tensor[(128, 1, 3, 3), float32] */ /* ty=Tensor[(128, 1, 3, 3), float32] */ /* ty=Tensor[(128, 1, 3, 3), float32] */ /* ty=Tensor[(128, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 3, 3), float32] */;
  %369 = nn.conv2d(%368, meta[relay.Constant][144] /* ty=Tensor[(128, 128, 1, 1), float32] */ /* ty=Tensor[(128, 128, 1, 1), float32] */ /* ty=Tensor[(128, 128, 1, 1), float32] */ /* ty=Tensor[(128, 128, 1, 1), float32] */ /* ty=Tensor[(128, 128, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 3, 3), float32] */;
  %370 = nn.batch_norm(%369, meta[relay.Constant][230] /* ty=Tensor[(128), float32] */, meta[relay.Constant][231] /* ty=Tensor[(128), float32] */, meta[relay.Constant][232] /* ty=Tensor[(128), float32] */, meta[relay.Constant][233] /* ty=Tensor[(128), float32] */, epsilon=0.001f) /* ty=(Tensor[(1, 128, 3, 3), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %371 = %370.0;
  %372 = maximum(%371, 0f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 128, 3, 3), float32] */;
  %373 = minimum(%372, 6f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 128, 3, 3), float32] */;
  %374 = nn.conv2d(%373, meta[relay.Constant][149] /* ty=Tensor[(128, 1, 3, 3), float32] */ /* ty=Tensor[(128, 1, 3, 3), float32] */ /* ty=Tensor[(128, 1, 3, 3), float32] */ /* ty=Tensor[(128, 1, 3, 3), float32] */ /* ty=Tensor[(128, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 3, 3), float32] */;
  %375 = nn.conv2d(%374, meta[relay.Constant][150] /* ty=Tensor[(128, 128, 1, 1), float32] */ /* ty=Tensor[(128, 128, 1, 1), float32] */ /* ty=Tensor[(128, 128, 1, 1), float32] */ /* ty=Tensor[(128, 128, 1, 1), float32] */ /* ty=Tensor[(128, 128, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 3, 3), float32] */;
  %376 = nn.batch_norm(%375, meta[relay.Constant][234] /* ty=Tensor[(128), float32] */, meta[relay.Constant][235] /* ty=Tensor[(128), float32] */, meta[relay.Constant][236] /* ty=Tensor[(128), float32] */, meta[relay.Constant][237] /* ty=Tensor[(128), float32] */, epsilon=0.001f) /* ty=(Tensor[(1, 128, 3, 3), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %377 = %376.0;
  %378 = maximum(%377, 0f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 128, 3, 3), float32] */;
  %379 = minimum(%378, 6f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 128, 3, 3), float32] */;
  %380 = nn.conv2d(%379, meta[relay.Constant][155] /* ty=Tensor[(128, 1, 3, 3), float32] */ /* ty=Tensor[(128, 1, 3, 3), float32] */ /* ty=Tensor[(128, 1, 3, 3), float32] */ /* ty=Tensor[(128, 1, 3, 3), float32] */ /* ty=Tensor[(128, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 3, 3), float32] */;
  %381 = nn.conv2d(%380, meta[relay.Constant][156] /* ty=Tensor[(128, 128, 1, 1), float32] */ /* ty=Tensor[(128, 128, 1, 1), float32] */ /* ty=Tensor[(128, 128, 1, 1), float32] */ /* ty=Tensor[(128, 128, 1, 1), float32] */ /* ty=Tensor[(128, 128, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 3, 3), float32] */;
  %382 = nn.batch_norm(%381, meta[relay.Constant][238] /* ty=Tensor[(128), float32] */, meta[relay.Constant][239] /* ty=Tensor[(128), float32] */, meta[relay.Constant][240] /* ty=Tensor[(128), float32] */, meta[relay.Constant][241] /* ty=Tensor[(128), float32] */, epsilon=0.001f) /* ty=(Tensor[(1, 128, 3, 3), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %383 = %382.0;
  %384 = maximum(%383, 0f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 128, 3, 3), float32] */;
  %385 = minimum(%384, 6f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 128, 3, 3), float32] */;
  %386 = nn.conv2d(%385, meta[relay.Constant][161] /* ty=Tensor[(128, 1, 3, 3), float32] */ /* ty=Tensor[(128, 1, 3, 3), float32] */ /* ty=Tensor[(128, 1, 3, 3), float32] */ /* ty=Tensor[(128, 1, 3, 3), float32] */ /* ty=Tensor[(128, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 3, 3), float32] */;
  %387 = nn.conv2d(%386, meta[relay.Constant][162] /* ty=Tensor[(128, 128, 1, 1), float32] */ /* ty=Tensor[(128, 128, 1, 1), float32] */ /* ty=Tensor[(128, 128, 1, 1), float32] */ /* ty=Tensor[(128, 128, 1, 1), float32] */ /* ty=Tensor[(128, 128, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 128, 3, 3), float32] */;
  %388 = nn.batch_norm(%387, meta[relay.Constant][242] /* ty=Tensor[(128), float32] */, meta[relay.Constant][243] /* ty=Tensor[(128), float32] */, meta[relay.Constant][244] /* ty=Tensor[(128), float32] */, meta[relay.Constant][245] /* ty=Tensor[(128), float32] */, epsilon=0.001f) /* ty=(Tensor[(1, 128, 3, 3), float32], Tensor[(128), float32], Tensor[(128), float32]) */;
  %389 = %388.0;
  %390 = maximum(%389, 0f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 128, 3, 3), float32] */;
  %391 = minimum(%390, 6f /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(1, 128, 3, 3), float32] */;
  %392 = nn.conv2d(%391, meta[relay.Constant][167] /* ty=Tensor[(128, 1, 3, 3), float32] */ /* ty=Tensor[(128, 1, 3, 3), float32] */ /* ty=Tensor[(128, 1, 3, 3), float32] */ /* ty=Tensor[(128, 1, 3, 3), float32] */ /* ty=Tensor[(128, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 3, 3), float32] */;
  %393 = nn.conv2d(%392, meta[relay.Constant][168] /* ty=Tensor[(24, 128, 1, 1), float32] */ /* ty=Tensor[(24, 128, 1, 1), float32] */ /* ty=Tensor[(24, 128, 1, 1), float32] */ /* ty=Tensor[(24, 128, 1, 1), float32] */ /* ty=Tensor[(24, 128, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 24, 3, 3), float32] */;
  %394 = nn.bias_add(%393, meta[relay.Constant][169] /* ty=Tensor[(24), float32] */ /* ty=Tensor[(24), float32] */ /* ty=Tensor[(24), float32] */ /* ty=Tensor[(24), float32] */ /* ty=Tensor[(24), float32] */) /* ty=Tensor[(1, 24, 3, 3), float32] */;
  %395 = transpose(%394, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 3, 3, 24), float32] */;
  %396 = reshape(%271, newshape=[1, -1, 4]) /* ty=Tensor[(1, 9600, 4), float32] */;
  %397 = reshape(%299, newshape=[1, -1, 4]) /* ty=Tensor[(1, 2400, 4), float32] */;
  %398 = reshape(%327, newshape=[1, -1, 4]) /* ty=Tensor[(1, 600, 4), float32] */;
  %399 = reshape(%361, newshape=[1, -1, 4]) /* ty=Tensor[(1, 150, 4), float32] */;
  %400 = reshape(%395, newshape=[1, -1, 4]) /* ty=Tensor[(1, 54, 4), float32] */;
  %401 = (%396, %397, %398, %399, %400);
  %402 = concatenate(%401, axis=1) /* ty=Tensor[(1, 12804, 4), float32] */;
  %403 = reshape(%402, newshape=[-1, 4]) /* ty=Tensor[(12804, 4), float32] */;
  %404 = transpose(%403, axes=[1, 0]) /* ty=Tensor[(4, 12804), float32] */;
  %405 = split(%404, indices_or_sections=4) /* ty=(Tensor[(1, 12804), float32], Tensor[(1, 12804), float32], Tensor[(1, 12804), float32], Tensor[(1, 12804), float32]) */;
  %406 = %405.0;
  %407 = squeeze(%406, axis=[0]) /* ty=Tensor[(12804), float32] */;
  %408 = multiply(%407, meta[relay.Constant][246] /* ty=Tensor[(12804), float32] */) /* ty=Tensor[(12804), float32] */;
  %409 = %405.2;
  %410 = squeeze(%409, axis=[0]) /* ty=Tensor[(12804), float32] */;
  %411 = multiply(%410, 0.2f /* ty=float32 */) /* ty=Tensor[(12804), float32] */;
  %412 = exp(%411) /* ty=Tensor[(12804), float32] */;
  %413 = multiply(%412, meta[relay.Constant][248] /* ty=Tensor[(12804), float32] */) /* ty=Tensor[(12804), float32] */;
  %414 = add(%408, meta[relay.Constant][247] /* ty=Tensor[(12804), float32] */) /* ty=Tensor[(12804), float32] */;
  %415 = multiply(%413, 0.5f /* ty=float32 */) /* ty=Tensor[(12804), float32] */;
  %416 = subtract(%414, %415) /* ty=Tensor[(12804), float32] */;
  %417 = %405.1;
  %418 = squeeze(%417, axis=[0]) /* ty=Tensor[(12804), float32] */;
  %419 = multiply(%418, meta[relay.Constant][249] /* ty=Tensor[(12804), float32] */) /* ty=Tensor[(12804), float32] */;
  %420 = %405.3;
  %421 = squeeze(%420, axis=[0]) /* ty=Tensor[(12804), float32] */;
  %422 = multiply(%421, 0.2f /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(12804), float32] */;
  %423 = exp(%422) /* ty=Tensor[(12804), float32] */;
  %424 = multiply(%423, meta[relay.Constant][251] /* ty=Tensor[(12804), float32] */) /* ty=Tensor[(12804), float32] */;
  %425 = add(%419, meta[relay.Constant][250] /* ty=Tensor[(12804), float32] */) /* ty=Tensor[(12804), float32] */;
  %426 = multiply(%424, 0.5f /* ty=float32 */ /* ty=float32 */) /* ty=Tensor[(12804), float32] */;
  %427 = subtract(%425, %426) /* ty=Tensor[(12804), float32] */;
  %428 = add(%414, %415) /* ty=Tensor[(12804), float32] */;
  %429 = add(%425, %426) /* ty=Tensor[(12804), float32] */;
  %430 = expand_dims(%416, axis=0) /* ty=Tensor[(1, 12804), float32] */;
  %431 = expand_dims(%427, axis=0) /* ty=Tensor[(1, 12804), float32] */;
  %432 = expand_dims(%428, axis=0) /* ty=Tensor[(1, 12804), float32] */;
  %433 = expand_dims(%429, axis=0) /* ty=Tensor[(1, 12804), float32] */;
  %434 = (%430, %431, %432, %433);
  %435 = concatenate(%434) /* ty=Tensor[(4, 12804), float32] */;
  %436 = transpose(%435, axes=[1, 0]) /* ty=Tensor[(12804, 4), float32] */;
  %437 = reshape(%436, newshape=[1, 12804, 4]) /* ty=Tensor[(1, 12804, 4), float32] */;
  %438 = expand_dims(%437, axis=2) /* ty=Tensor[(1, 12804, 1, 4), float32] */;
  %439 = nn.conv2d(%267, meta[relay.Constant][252] /* ty=Tensor[(128, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 40, 40), float32] */;
  %440 = nn.conv2d(%439, meta[relay.Constant][253] /* ty=Tensor[(546, 128, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 546, 40, 40), float32] */;
  %441 = nn.bias_add(%440, meta[relay.Constant][254] /* ty=Tensor[(546), float32] */) /* ty=Tensor[(1, 546, 40, 40), float32] */;
  %442 = transpose(%441, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 40, 40, 546), float32] */;
  %443 = reshape(%442, newshape=[1, 40, 40, 6, 91]) /* ty=Tensor[(1, 40, 40, 6, 91), float32] */;
  %444 = nn.conv2d(%295, meta[relay.Constant][252] /* ty=Tensor[(128, 1, 3, 3), float32] */ /* ty=Tensor[(128, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 20, 20), float32] */;
  %445 = nn.conv2d(%444, meta[relay.Constant][253] /* ty=Tensor[(546, 128, 1, 1), float32] */ /* ty=Tensor[(546, 128, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 546, 20, 20), float32] */;
  %446 = nn.bias_add(%445, meta[relay.Constant][254] /* ty=Tensor[(546), float32] */ /* ty=Tensor[(546), float32] */) /* ty=Tensor[(1, 546, 20, 20), float32] */;
  %447 = transpose(%446, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 20, 20, 546), float32] */;
  %448 = reshape(%447, newshape=[1, 20, 20, 6, 91]) /* ty=Tensor[(1, 20, 20, 6, 91), float32] */;
  %449 = nn.conv2d(%323, meta[relay.Constant][252] /* ty=Tensor[(128, 1, 3, 3), float32] */ /* ty=Tensor[(128, 1, 3, 3), float32] */ /* ty=Tensor[(128, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 10, 10), float32] */;
  %450 = nn.conv2d(%449, meta[relay.Constant][253] /* ty=Tensor[(546, 128, 1, 1), float32] */ /* ty=Tensor[(546, 128, 1, 1), float32] */ /* ty=Tensor[(546, 128, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 546, 10, 10), float32] */;
  %451 = nn.bias_add(%450, meta[relay.Constant][254] /* ty=Tensor[(546), float32] */ /* ty=Tensor[(546), float32] */ /* ty=Tensor[(546), float32] */) /* ty=Tensor[(1, 546, 10, 10), float32] */;
  %452 = transpose(%451, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 10, 10, 546), float32] */;
  %453 = reshape(%452, newshape=[1, 10, 10, 6, 91]) /* ty=Tensor[(1, 10, 10, 6, 91), float32] */;
  %454 = nn.conv2d(%357, meta[relay.Constant][252] /* ty=Tensor[(128, 1, 3, 3), float32] */ /* ty=Tensor[(128, 1, 3, 3), float32] */ /* ty=Tensor[(128, 1, 3, 3), float32] */ /* ty=Tensor[(128, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 5, 5), float32] */;
  %455 = nn.conv2d(%454, meta[relay.Constant][253] /* ty=Tensor[(546, 128, 1, 1), float32] */ /* ty=Tensor[(546, 128, 1, 1), float32] */ /* ty=Tensor[(546, 128, 1, 1), float32] */ /* ty=Tensor[(546, 128, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 546, 5, 5), float32] */;
  %456 = nn.bias_add(%455, meta[relay.Constant][254] /* ty=Tensor[(546), float32] */ /* ty=Tensor[(546), float32] */ /* ty=Tensor[(546), float32] */ /* ty=Tensor[(546), float32] */) /* ty=Tensor[(1, 546, 5, 5), float32] */;
  %457 = transpose(%456, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 5, 5, 546), float32] */;
  %458 = reshape(%457, newshape=[1, 5, 5, 6, 91]) /* ty=Tensor[(1, 5, 5, 6, 91), float32] */;
  %459 = nn.conv2d(%391, meta[relay.Constant][252] /* ty=Tensor[(128, 1, 3, 3), float32] */ /* ty=Tensor[(128, 1, 3, 3), float32] */ /* ty=Tensor[(128, 1, 3, 3), float32] */ /* ty=Tensor[(128, 1, 3, 3), float32] */ /* ty=Tensor[(128, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=128, kernel_size=[3, 3]) /* ty=Tensor[(1, 128, 3, 3), float32] */;
  %460 = nn.conv2d(%459, meta[relay.Constant][253] /* ty=Tensor[(546, 128, 1, 1), float32] */ /* ty=Tensor[(546, 128, 1, 1), float32] */ /* ty=Tensor[(546, 128, 1, 1), float32] */ /* ty=Tensor[(546, 128, 1, 1), float32] */ /* ty=Tensor[(546, 128, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 546, 3, 3), float32] */;
  %461 = nn.bias_add(%460, meta[relay.Constant][254] /* ty=Tensor[(546), float32] */ /* ty=Tensor[(546), float32] */ /* ty=Tensor[(546), float32] */ /* ty=Tensor[(546), float32] */ /* ty=Tensor[(546), float32] */) /* ty=Tensor[(1, 546, 3, 3), float32] */;
  %462 = transpose(%461, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 3, 3, 546), float32] */;
  %463 = reshape(%462, newshape=[1, 3, 3, 6, 91]) /* ty=Tensor[(1, 3, 3, 6, 91), float32] */;
  %464 = reshape(%443, newshape=[1, -1, 91]) /* ty=Tensor[(1, 9600, 91), float32] */;
  %465 = reshape(%448, newshape=[1, -1, 91]) /* ty=Tensor[(1, 2400, 91), float32] */;
  %466 = reshape(%453, newshape=[1, -1, 91]) /* ty=Tensor[(1, 600, 91), float32] */;
  %467 = reshape(%458, newshape=[1, -1, 91]) /* ty=Tensor[(1, 150, 91), float32] */;
  %468 = reshape(%463, newshape=[1, -1, 91]) /* ty=Tensor[(1, 54, 91), float32] */;
  %469 = (%464, %465, %466, %467, %468);
  %470 = concatenate(%469, axis=1) /* ty=Tensor[(1, 12804, 91), float32] */;
  %471 = sigmoid(%470) /* ty=Tensor[(1, 12804, 91), float32] */;
  %472 = strided_slice(%471, begin=[0, 0, 1], end=[9223372036854775807, 9223372036854775807, 9223372036854775807], strides=[1, 1, 1], axes=None) /* ty=Tensor[(1, 12804, 90), float32] */;
  %473 = squeeze(%438, axis=[2]) /* ty=Tensor[(1, 12804, 4), float32] */;
  %474 = transpose(%472, axes=[0, 2, 1]) /* ty=Tensor[(1, 90, 12804), float32] */;
  %475 = vision.all_class_non_max_suppression(%473, %474, 100 /* ty=int64 */, 0.6f /* ty=float32 */, 1e-08f /* ty=float32 */, meta[relay.attrs.AllClassNonMaximumSuppressionAttrs][0]) /* ty=(Tensor[(1, 1152360, 2), int64], Tensor[(1, 1152360), float32], Tensor[(1), int64]) */;
  %476 = %475.1;
  %477 = topk(%476, k=100, axis=1, dtype="int32") /* ty=(Tensor[(1, 100), float32], Tensor[(1, 100), int32]) */;
  %478 = %475.0;
  %479 = %477.1;
  %480 = take(%478, %479, batch_dims=1, axis=1) /* ty=Tensor[(1, 100, 2), int64] */;
  %481 = take(%480, 1 /* ty=int32 */, axis=2) /* ty=Tensor[(1, 100), int64] */;
  %482 = take(%473, %481, batch_dims=1, axis=1) /* ty=Tensor[(1, 100, 4), float32] */;
  %483 = maximum(%482, 0f /* ty=float32 */) /* ty=Tensor[(1, 100, 4), float32] */;
  %484 = arange(0 /* ty=int64 */, 100 /* ty=int64 */, 1 /* ty=int64 */, start=meta[relay.Constant][255], stop=meta[relay.Constant][256], step=meta[relay.Constant][257], dtype="int64") /* ty=Tensor[(100), int64] */;
  %485 = %475.2;
  %486 = tile(%484, reps=[1, 1]) /* ty=Tensor[(1, 100), int64] */;
  %487 = expand_dims(%485, axis=1) /* ty=Tensor[(1, 1), int64] */;
  %488 = less(%486, %487) /* ty=Tensor[(1, 100), bool] */;
  %489 = cast(%488, dtype="float32") /* ty=Tensor[(1, 100), float32] */;
  %490 = minimum(%483, 1f /* ty=float32 */) /* ty=Tensor[(1, 100, 4), float32] */;
  %491 = expand_dims(%489, axis=2) /* ty=Tensor[(1, 100, 1), float32] */;
  %492 = take(%480, 0 /* ty=int32 */, axis=2) /* ty=Tensor[(1, 100), int64] */;
  %493 = multiply(%490, %491) /* ty=Tensor[(1, 100, 4), float32] */;
  %494 = %477.0;
  %495 = cast(%492, dtype="float32") /* ty=Tensor[(1, 100), float32] */;
  %496 = (%493, %494, %495, %485);
  %497 = %496.2;
  %498 = %496.3;
  %499 = %496.0;
  %500 = add(%497, 1f /* ty=float32 */) /* ty=Tensor[(1, 100), float32] */;
  %501 = %496.1;
  %502 = cast(%498, dtype="float32") /* ty=Tensor[(1), float32] */;
  (%499, %500, %501, %502, %473, %471)
}
