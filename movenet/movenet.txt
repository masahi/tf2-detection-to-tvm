def @main(%input: Tensor[(1, 256, 256, 3), int32]) -> Tensor[(1, 1, 17, 3), float32] {
  %0 = cast(%input, dtype="float32") /* ty=Tensor[(1, 256, 256, 3), float32] */;
  %1 = split(%0, indices_or_sections=1) /* ty=(Tensor[(1, 256, 256, 3), float32],) */;
  %2 = %1.0;
  %3 = subtract(%2, meta[relay.Constant][0] /* ty=Tensor[(1, 1, 1, 3), float32] */) /* ty=Tensor[(1, 256, 256, 3), float32] */;
  %4 = multiply(%3, meta[relay.Constant][1] /* ty=Tensor[(1, 1, 1, 3), float32] */) /* ty=Tensor[(1, 256, 256, 3), float32] */;
  %5 = subtract(%4, 1f /* ty=float32 */) /* ty=Tensor[(1, 256, 256, 3), float32] */;
  %6 = transpose(%5, axes=[0, 3, 1, 2]) /* ty=Tensor[(1, 3, 256, 256), float32] */;
  %7 = nn.conv2d(%6, meta[relay.Constant][2] /* ty=Tensor[(56, 3, 3, 3), float32] */, strides=[2, 2], padding=[0, 0, 1, 1], kernel_size=[3, 3]) /* ty=Tensor[(1, 56, 128, 128), float32] */;
  %8 = nn.bias_add(%7, meta[relay.Constant][3] /* ty=Tensor[(56), float32] */) /* ty=Tensor[(1, 56, 128, 128), float32] */;
  %9 = clip(%8, a_min=0f, a_max=6f) /* ty=Tensor[(1, 56, 128, 128), float32] */;
  %10 = nn.conv2d(%9, meta[relay.Constant][4] /* ty=Tensor[(56, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=56, kernel_size=[3, 3]) /* ty=Tensor[(1, 56, 128, 128), float32] */;
  %11 = nn.bias_add(%10, meta[relay.Constant][5] /* ty=Tensor[(56), float32] */) /* ty=Tensor[(1, 56, 128, 128), float32] */;
  %12 = clip(%11, a_min=0f, a_max=6f) /* ty=Tensor[(1, 56, 128, 128), float32] */;
  %13 = nn.conv2d(%12, meta[relay.Constant][6] /* ty=Tensor[(32, 56, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 128, 128), float32] */;
  %14 = nn.bias_add(%13, meta[relay.Constant][7] /* ty=Tensor[(32), float32] */) /* ty=Tensor[(1, 32, 128, 128), float32] */;
  %15 = nn.conv2d(%14, meta[relay.Constant][8] /* ty=Tensor[(192, 32, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 192, 128, 128), float32] */;
  %16 = nn.batch_norm(%15, meta[relay.Constant][9] /* ty=Tensor[(192), float32] */, meta[relay.Constant][10] /* ty=Tensor[(192), float32] */, meta[relay.Constant][11] /* ty=Tensor[(192), float32] */, meta[relay.Constant][12] /* ty=Tensor[(192), float32] */, epsilon=0.001f) /* ty=(Tensor[(1, 192, 128, 128), float32], Tensor[(192), float32], Tensor[(192), float32]) */;
  %17 = %16.0;
  %18 = clip(%17, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 128, 128), float32] */;
  %19 = nn.conv2d(%18, meta[relay.Constant][13] /* ty=Tensor[(192, 1, 3, 3), float32] */, strides=[2, 2], padding=[0, 0, 1, 1], groups=192, kernel_size=[3, 3]) /* ty=Tensor[(1, 192, 64, 64), float32] */;
  %20 = nn.bias_add(%19, meta[relay.Constant][14] /* ty=Tensor[(192), float32] */) /* ty=Tensor[(1, 192, 64, 64), float32] */;
  %21 = clip(%20, a_min=0f, a_max=6f) /* ty=Tensor[(1, 192, 64, 64), float32] */;
  %22 = nn.conv2d(%21, meta[relay.Constant][15] /* ty=Tensor[(40, 192, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 40, 64, 64), float32] */;
  %23 = nn.bias_add(%22, meta[relay.Constant][16] /* ty=Tensor[(40), float32] */) /* ty=Tensor[(1, 40, 64, 64), float32] */;
  %24 = nn.conv2d(%23, meta[relay.Constant][17] /* ty=Tensor[(240, 40, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 240, 64, 64), float32] */;
  %25 = nn.batch_norm(%24, meta[relay.Constant][18] /* ty=Tensor[(240), float32] */, meta[relay.Constant][19] /* ty=Tensor[(240), float32] */, meta[relay.Constant][20] /* ty=Tensor[(240), float32] */, meta[relay.Constant][21] /* ty=Tensor[(240), float32] */, epsilon=0.001f) /* ty=(Tensor[(1, 240, 64, 64), float32], Tensor[(240), float32], Tensor[(240), float32]) */;
  %26 = %25.0;
  %27 = clip(%26, a_min=0f, a_max=6f) /* ty=Tensor[(1, 240, 64, 64), float32] */;
  %28 = nn.conv2d(%27, meta[relay.Constant][22] /* ty=Tensor[(240, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=240, kernel_size=[3, 3]) /* ty=Tensor[(1, 240, 64, 64), float32] */;
  %29 = nn.bias_add(%28, meta[relay.Constant][23] /* ty=Tensor[(240), float32] */) /* ty=Tensor[(1, 240, 64, 64), float32] */;
  %30 = clip(%29, a_min=0f, a_max=6f) /* ty=Tensor[(1, 240, 64, 64), float32] */;
  %31 = nn.conv2d(%30, meta[relay.Constant][24] /* ty=Tensor[(40, 240, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 40, 64, 64), float32] */;
  %32 = nn.bias_add(%31, meta[relay.Constant][25] /* ty=Tensor[(40), float32] */) /* ty=Tensor[(1, 40, 64, 64), float32] */;
  %33 = add(%23, %32) /* ty=Tensor[(1, 40, 64, 64), float32] */;
  %34 = nn.conv2d(%33, meta[relay.Constant][26] /* ty=Tensor[(240, 40, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 240, 64, 64), float32] */;
  %35 = nn.bias_add(%34, meta[relay.Constant][27] /* ty=Tensor[(240), float32] */) /* ty=Tensor[(1, 240, 64, 64), float32] */;
  %36 = clip(%35, a_min=0f, a_max=6f) /* ty=Tensor[(1, 240, 64, 64), float32] */;
  %37 = nn.conv2d(%36, meta[relay.Constant][28] /* ty=Tensor[(240, 1, 3, 3), float32] */, strides=[2, 2], padding=[0, 0, 1, 1], groups=240, kernel_size=[3, 3]) /* ty=Tensor[(1, 240, 32, 32), float32] */;
  %38 = nn.bias_add(%37, meta[relay.Constant][29] /* ty=Tensor[(240), float32] */) /* ty=Tensor[(1, 240, 32, 32), float32] */;
  %39 = clip(%38, a_min=0f, a_max=6f) /* ty=Tensor[(1, 240, 32, 32), float32] */;
  %40 = nn.conv2d(%39, meta[relay.Constant][30] /* ty=Tensor[(56, 240, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 56, 32, 32), float32] */;
  %41 = nn.bias_add(%40, meta[relay.Constant][31] /* ty=Tensor[(56), float32] */) /* ty=Tensor[(1, 56, 32, 32), float32] */;
  %42 = nn.conv2d(%41, meta[relay.Constant][32] /* ty=Tensor[(336, 56, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 336, 32, 32), float32] */;
  %43 = nn.batch_norm(%42, meta[relay.Constant][33] /* ty=Tensor[(336), float32] */, meta[relay.Constant][34] /* ty=Tensor[(336), float32] */, meta[relay.Constant][35] /* ty=Tensor[(336), float32] */, meta[relay.Constant][36] /* ty=Tensor[(336), float32] */, epsilon=0.001f) /* ty=(Tensor[(1, 336, 32, 32), float32], Tensor[(336), float32], Tensor[(336), float32]) */;
  %44 = %43.0;
  %45 = clip(%44, a_min=0f, a_max=6f) /* ty=Tensor[(1, 336, 32, 32), float32] */;
  %46 = nn.conv2d(%45, meta[relay.Constant][37] /* ty=Tensor[(336, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=336, kernel_size=[3, 3]) /* ty=Tensor[(1, 336, 32, 32), float32] */;
  %47 = nn.bias_add(%46, meta[relay.Constant][38] /* ty=Tensor[(336), float32] */) /* ty=Tensor[(1, 336, 32, 32), float32] */;
  %48 = clip(%47, a_min=0f, a_max=6f) /* ty=Tensor[(1, 336, 32, 32), float32] */;
  %49 = nn.conv2d(%48, meta[relay.Constant][39] /* ty=Tensor[(56, 336, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 56, 32, 32), float32] */;
  %50 = nn.bias_add(%49, meta[relay.Constant][40] /* ty=Tensor[(56), float32] */) /* ty=Tensor[(1, 56, 32, 32), float32] */;
  %51 = add(%41, %50) /* ty=Tensor[(1, 56, 32, 32), float32] */;
  %52 = nn.conv2d(%51, meta[relay.Constant][41] /* ty=Tensor[(336, 56, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 336, 32, 32), float32] */;
  %53 = nn.bias_add(%52, meta[relay.Constant][42] /* ty=Tensor[(336), float32] */) /* ty=Tensor[(1, 336, 32, 32), float32] */;
  %54 = clip(%53, a_min=0f, a_max=6f) /* ty=Tensor[(1, 336, 32, 32), float32] */;
  %55 = nn.conv2d(%54, meta[relay.Constant][43] /* ty=Tensor[(336, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=336, kernel_size=[3, 3]) /* ty=Tensor[(1, 336, 32, 32), float32] */;
  %56 = nn.bias_add(%55, meta[relay.Constant][44] /* ty=Tensor[(336), float32] */) /* ty=Tensor[(1, 336, 32, 32), float32] */;
  %57 = clip(%56, a_min=0f, a_max=6f) /* ty=Tensor[(1, 336, 32, 32), float32] */;
  %58 = nn.conv2d(%57, meta[relay.Constant][45] /* ty=Tensor[(56, 336, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 56, 32, 32), float32] */;
  %59 = nn.bias_add(%58, meta[relay.Constant][46] /* ty=Tensor[(56), float32] */) /* ty=Tensor[(1, 56, 32, 32), float32] */;
  %60 = add(%51, %59) /* ty=Tensor[(1, 56, 32, 32), float32] */;
  %61 = nn.conv2d(%60, meta[relay.Constant][47] /* ty=Tensor[(336, 56, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 336, 32, 32), float32] */;
  %62 = nn.bias_add(%61, meta[relay.Constant][48] /* ty=Tensor[(336), float32] */) /* ty=Tensor[(1, 336, 32, 32), float32] */;
  %63 = clip(%62, a_min=0f, a_max=6f) /* ty=Tensor[(1, 336, 32, 32), float32] */;
  %64 = nn.conv2d(%63, meta[relay.Constant][49] /* ty=Tensor[(336, 1, 3, 3), float32] */, strides=[2, 2], padding=[0, 0, 1, 1], groups=336, kernel_size=[3, 3]) /* ty=Tensor[(1, 336, 16, 16), float32] */;
  %65 = nn.bias_add(%64, meta[relay.Constant][50] /* ty=Tensor[(336), float32] */) /* ty=Tensor[(1, 336, 16, 16), float32] */;
  %66 = clip(%65, a_min=0f, a_max=6f) /* ty=Tensor[(1, 336, 16, 16), float32] */;
  %67 = nn.conv2d(%66, meta[relay.Constant][51] /* ty=Tensor[(112, 336, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 112, 16, 16), float32] */;
  %68 = nn.bias_add(%67, meta[relay.Constant][52] /* ty=Tensor[(112), float32] */) /* ty=Tensor[(1, 112, 16, 16), float32] */;
  %69 = nn.conv2d(%68, meta[relay.Constant][53] /* ty=Tensor[(672, 112, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 672, 16, 16), float32] */;
  %70 = nn.batch_norm(%69, meta[relay.Constant][54] /* ty=Tensor[(672), float32] */, meta[relay.Constant][55] /* ty=Tensor[(672), float32] */, meta[relay.Constant][56] /* ty=Tensor[(672), float32] */, meta[relay.Constant][57] /* ty=Tensor[(672), float32] */, epsilon=0.001f) /* ty=(Tensor[(1, 672, 16, 16), float32], Tensor[(672), float32], Tensor[(672), float32]) */;
  %71 = %70.0;
  %72 = clip(%71, a_min=0f, a_max=6f) /* ty=Tensor[(1, 672, 16, 16), float32] */;
  %73 = nn.conv2d(%72, meta[relay.Constant][58] /* ty=Tensor[(672, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=672, kernel_size=[3, 3]) /* ty=Tensor[(1, 672, 16, 16), float32] */;
  %74 = nn.bias_add(%73, meta[relay.Constant][59] /* ty=Tensor[(672), float32] */) /* ty=Tensor[(1, 672, 16, 16), float32] */;
  %75 = clip(%74, a_min=0f, a_max=6f) /* ty=Tensor[(1, 672, 16, 16), float32] */;
  %76 = nn.conv2d(%75, meta[relay.Constant][60] /* ty=Tensor[(112, 672, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 112, 16, 16), float32] */;
  %77 = nn.bias_add(%76, meta[relay.Constant][61] /* ty=Tensor[(112), float32] */) /* ty=Tensor[(1, 112, 16, 16), float32] */;
  %78 = add(%68, %77) /* ty=Tensor[(1, 112, 16, 16), float32] */;
  %79 = nn.conv2d(%78, meta[relay.Constant][62] /* ty=Tensor[(672, 112, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 672, 16, 16), float32] */;
  %80 = nn.bias_add(%79, meta[relay.Constant][63] /* ty=Tensor[(672), float32] */) /* ty=Tensor[(1, 672, 16, 16), float32] */;
  %81 = clip(%80, a_min=0f, a_max=6f) /* ty=Tensor[(1, 672, 16, 16), float32] */;
  %82 = nn.conv2d(%81, meta[relay.Constant][64] /* ty=Tensor[(672, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=672, kernel_size=[3, 3]) /* ty=Tensor[(1, 672, 16, 16), float32] */;
  %83 = nn.bias_add(%82, meta[relay.Constant][65] /* ty=Tensor[(672), float32] */) /* ty=Tensor[(1, 672, 16, 16), float32] */;
  %84 = clip(%83, a_min=0f, a_max=6f) /* ty=Tensor[(1, 672, 16, 16), float32] */;
  %85 = nn.conv2d(%84, meta[relay.Constant][66] /* ty=Tensor[(112, 672, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 112, 16, 16), float32] */;
  %86 = nn.bias_add(%85, meta[relay.Constant][67] /* ty=Tensor[(112), float32] */) /* ty=Tensor[(1, 112, 16, 16), float32] */;
  %87 = add(%78, %86) /* ty=Tensor[(1, 112, 16, 16), float32] */;
  %88 = nn.conv2d(%87, meta[relay.Constant][68] /* ty=Tensor[(672, 112, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 672, 16, 16), float32] */;
  %89 = nn.bias_add(%88, meta[relay.Constant][69] /* ty=Tensor[(672), float32] */) /* ty=Tensor[(1, 672, 16, 16), float32] */;
  %90 = clip(%89, a_min=0f, a_max=6f) /* ty=Tensor[(1, 672, 16, 16), float32] */;
  %91 = nn.conv2d(%90, meta[relay.Constant][70] /* ty=Tensor[(672, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=672, kernel_size=[3, 3]) /* ty=Tensor[(1, 672, 16, 16), float32] */;
  %92 = nn.bias_add(%91, meta[relay.Constant][71] /* ty=Tensor[(672), float32] */) /* ty=Tensor[(1, 672, 16, 16), float32] */;
  %93 = clip(%92, a_min=0f, a_max=6f) /* ty=Tensor[(1, 672, 16, 16), float32] */;
  %94 = nn.conv2d(%93, meta[relay.Constant][72] /* ty=Tensor[(112, 672, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 112, 16, 16), float32] */;
  %95 = nn.bias_add(%94, meta[relay.Constant][73] /* ty=Tensor[(112), float32] */) /* ty=Tensor[(1, 112, 16, 16), float32] */;
  %96 = add(%87, %95) /* ty=Tensor[(1, 112, 16, 16), float32] */;
  %97 = nn.conv2d(%96, meta[relay.Constant][74] /* ty=Tensor[(672, 112, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 672, 16, 16), float32] */;
  %98 = nn.bias_add(%97, meta[relay.Constant][75] /* ty=Tensor[(672), float32] */) /* ty=Tensor[(1, 672, 16, 16), float32] */;
  %99 = clip(%98, a_min=0f, a_max=6f) /* ty=Tensor[(1, 672, 16, 16), float32] */;
  %100 = nn.conv2d(%99, meta[relay.Constant][76] /* ty=Tensor[(672, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=672, kernel_size=[3, 3]) /* ty=Tensor[(1, 672, 16, 16), float32] */;
  %101 = nn.bias_add(%100, meta[relay.Constant][77] /* ty=Tensor[(672), float32] */) /* ty=Tensor[(1, 672, 16, 16), float32] */;
  %102 = clip(%101, a_min=0f, a_max=6f) /* ty=Tensor[(1, 672, 16, 16), float32] */;
  %103 = nn.conv2d(%102, meta[relay.Constant][78] /* ty=Tensor[(168, 672, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 168, 16, 16), float32] */;
  %104 = nn.bias_add(%103, meta[relay.Constant][79] /* ty=Tensor[(168), float32] */) /* ty=Tensor[(1, 168, 16, 16), float32] */;
  %105 = nn.conv2d(%104, meta[relay.Constant][80] /* ty=Tensor[(1008, 168, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 1008, 16, 16), float32] */;
  %106 = nn.batch_norm(%105, meta[relay.Constant][81] /* ty=Tensor[(1008), float32] */, meta[relay.Constant][82] /* ty=Tensor[(1008), float32] */, meta[relay.Constant][83] /* ty=Tensor[(1008), float32] */, meta[relay.Constant][84] /* ty=Tensor[(1008), float32] */, epsilon=0.001f) /* ty=(Tensor[(1, 1008, 16, 16), float32], Tensor[(1008), float32], Tensor[(1008), float32]) */;
  %107 = %106.0;
  %108 = clip(%107, a_min=0f, a_max=6f) /* ty=Tensor[(1, 1008, 16, 16), float32] */;
  %109 = nn.conv2d(%108, meta[relay.Constant][85] /* ty=Tensor[(1008, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=1008, kernel_size=[3, 3]) /* ty=Tensor[(1, 1008, 16, 16), float32] */;
  %110 = nn.bias_add(%109, meta[relay.Constant][86] /* ty=Tensor[(1008), float32] */) /* ty=Tensor[(1, 1008, 16, 16), float32] */;
  %111 = clip(%110, a_min=0f, a_max=6f) /* ty=Tensor[(1, 1008, 16, 16), float32] */;
  %112 = nn.conv2d(%111, meta[relay.Constant][87] /* ty=Tensor[(168, 1008, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 168, 16, 16), float32] */;
  %113 = nn.bias_add(%112, meta[relay.Constant][88] /* ty=Tensor[(168), float32] */) /* ty=Tensor[(1, 168, 16, 16), float32] */;
  %114 = add(%104, %113) /* ty=Tensor[(1, 168, 16, 16), float32] */;
  %115 = nn.conv2d(%114, meta[relay.Constant][89] /* ty=Tensor[(1008, 168, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 1008, 16, 16), float32] */;
  %116 = nn.bias_add(%115, meta[relay.Constant][90] /* ty=Tensor[(1008), float32] */) /* ty=Tensor[(1, 1008, 16, 16), float32] */;
  %117 = clip(%116, a_min=0f, a_max=6f) /* ty=Tensor[(1, 1008, 16, 16), float32] */;
  %118 = nn.conv2d(%117, meta[relay.Constant][91] /* ty=Tensor[(1008, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=1008, kernel_size=[3, 3]) /* ty=Tensor[(1, 1008, 16, 16), float32] */;
  %119 = nn.bias_add(%118, meta[relay.Constant][92] /* ty=Tensor[(1008), float32] */) /* ty=Tensor[(1, 1008, 16, 16), float32] */;
  %120 = clip(%119, a_min=0f, a_max=6f) /* ty=Tensor[(1, 1008, 16, 16), float32] */;
  %121 = nn.conv2d(%120, meta[relay.Constant][93] /* ty=Tensor[(168, 1008, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 168, 16, 16), float32] */;
  %122 = nn.bias_add(%121, meta[relay.Constant][94] /* ty=Tensor[(168), float32] */) /* ty=Tensor[(1, 168, 16, 16), float32] */;
  %123 = add(%114, %122) /* ty=Tensor[(1, 168, 16, 16), float32] */;
  %124 = nn.conv2d(%123, meta[relay.Constant][95] /* ty=Tensor[(1008, 168, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 1008, 16, 16), float32] */;
  %125 = nn.bias_add(%124, meta[relay.Constant][96] /* ty=Tensor[(1008), float32] */) /* ty=Tensor[(1, 1008, 16, 16), float32] */;
  %126 = clip(%125, a_min=0f, a_max=6f) /* ty=Tensor[(1, 1008, 16, 16), float32] */;
  %127 = nn.conv2d(%126, meta[relay.Constant][97] /* ty=Tensor[(1008, 1, 3, 3), float32] */, strides=[2, 2], padding=[0, 0, 1, 1], groups=1008, kernel_size=[3, 3]) /* ty=Tensor[(1, 1008, 8, 8), float32] */;
  %128 = nn.bias_add(%127, meta[relay.Constant][98] /* ty=Tensor[(1008), float32] */) /* ty=Tensor[(1, 1008, 8, 8), float32] */;
  %129 = clip(%128, a_min=0f, a_max=6f) /* ty=Tensor[(1, 1008, 8, 8), float32] */;
  %130 = nn.conv2d(%129, meta[relay.Constant][99] /* ty=Tensor[(280, 1008, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 280, 8, 8), float32] */;
  %131 = nn.bias_add(%130, meta[relay.Constant][100] /* ty=Tensor[(280), float32] */) /* ty=Tensor[(1, 280, 8, 8), float32] */;
  %132 = nn.conv2d(%131, meta[relay.Constant][101] /* ty=Tensor[(1680, 280, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 1680, 8, 8), float32] */;
  %133 = nn.batch_norm(%132, meta[relay.Constant][102] /* ty=Tensor[(1680), float32] */, meta[relay.Constant][103] /* ty=Tensor[(1680), float32] */, meta[relay.Constant][104] /* ty=Tensor[(1680), float32] */, meta[relay.Constant][105] /* ty=Tensor[(1680), float32] */, epsilon=0.001f) /* ty=(Tensor[(1, 1680, 8, 8), float32], Tensor[(1680), float32], Tensor[(1680), float32]) */;
  %134 = %133.0;
  %135 = clip(%134, a_min=0f, a_max=6f) /* ty=Tensor[(1, 1680, 8, 8), float32] */;
  %136 = nn.conv2d(%135, meta[relay.Constant][106] /* ty=Tensor[(1680, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=1680, kernel_size=[3, 3]) /* ty=Tensor[(1, 1680, 8, 8), float32] */;
  %137 = nn.bias_add(%136, meta[relay.Constant][107] /* ty=Tensor[(1680), float32] */) /* ty=Tensor[(1, 1680, 8, 8), float32] */;
  %138 = clip(%137, a_min=0f, a_max=6f) /* ty=Tensor[(1, 1680, 8, 8), float32] */;
  %139 = nn.conv2d(%138, meta[relay.Constant][108] /* ty=Tensor[(280, 1680, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 280, 8, 8), float32] */;
  %140 = nn.bias_add(%139, meta[relay.Constant][109] /* ty=Tensor[(280), float32] */) /* ty=Tensor[(1, 280, 8, 8), float32] */;
  %141 = add(%131, %140) /* ty=Tensor[(1, 280, 8, 8), float32] */;
  %142 = nn.conv2d(%141, meta[relay.Constant][110] /* ty=Tensor[(1680, 280, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 1680, 8, 8), float32] */;
  %143 = nn.bias_add(%142, meta[relay.Constant][111] /* ty=Tensor[(1680), float32] */) /* ty=Tensor[(1, 1680, 8, 8), float32] */;
  %144 = clip(%143, a_min=0f, a_max=6f) /* ty=Tensor[(1, 1680, 8, 8), float32] */;
  %145 = nn.conv2d(%144, meta[relay.Constant][112] /* ty=Tensor[(1680, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=1680, kernel_size=[3, 3]) /* ty=Tensor[(1, 1680, 8, 8), float32] */;
  %146 = nn.bias_add(%145, meta[relay.Constant][113] /* ty=Tensor[(1680), float32] */) /* ty=Tensor[(1, 1680, 8, 8), float32] */;
  %147 = clip(%146, a_min=0f, a_max=6f) /* ty=Tensor[(1, 1680, 8, 8), float32] */;
  %148 = nn.conv2d(%147, meta[relay.Constant][114] /* ty=Tensor[(280, 1680, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 280, 8, 8), float32] */;
  %149 = nn.bias_add(%148, meta[relay.Constant][115] /* ty=Tensor[(280), float32] */) /* ty=Tensor[(1, 280, 8, 8), float32] */;
  %150 = add(%141, %149) /* ty=Tensor[(1, 280, 8, 8), float32] */;
  %151 = nn.conv2d(%150, meta[relay.Constant][116] /* ty=Tensor[(1680, 280, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 1680, 8, 8), float32] */;
  %152 = nn.bias_add(%151, meta[relay.Constant][117] /* ty=Tensor[(1680), float32] */) /* ty=Tensor[(1, 1680, 8, 8), float32] */;
  %153 = clip(%152, a_min=0f, a_max=6f) /* ty=Tensor[(1, 1680, 8, 8), float32] */;
  %154 = nn.conv2d(%153, meta[relay.Constant][118] /* ty=Tensor[(1680, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=1680, kernel_size=[3, 3]) /* ty=Tensor[(1, 1680, 8, 8), float32] */;
  %155 = nn.bias_add(%154, meta[relay.Constant][119] /* ty=Tensor[(1680), float32] */) /* ty=Tensor[(1, 1680, 8, 8), float32] */;
  %156 = clip(%155, a_min=0f, a_max=6f) /* ty=Tensor[(1, 1680, 8, 8), float32] */;
  %157 = nn.conv2d(%156, meta[relay.Constant][120] /* ty=Tensor[(560, 1680, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 560, 8, 8), float32] */;
  %158 = nn.bias_add(%157, meta[relay.Constant][121] /* ty=Tensor[(560), float32] */) /* ty=Tensor[(1, 560, 8, 8), float32] */;
  %159 = nn.conv2d(%158, meta[relay.Constant][122] /* ty=Tensor[(1280, 560, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 1280, 8, 8), float32] */;
  %160 = nn.batch_norm(%159, meta[relay.Constant][123] /* ty=Tensor[(1280), float32] */, meta[relay.Constant][124] /* ty=Tensor[(1280), float32] */, meta[relay.Constant][125] /* ty=Tensor[(1280), float32] */, meta[relay.Constant][126] /* ty=Tensor[(1280), float32] */, epsilon=0.001f) /* ty=(Tensor[(1, 1280, 8, 8), float32], Tensor[(1280), float32], Tensor[(1280), float32]) */;
  %161 = %160.0;
  %162 = clip(%161, a_min=0f, a_max=6f) /* ty=Tensor[(1, 1280, 8, 8), float32] */;
  %163 = nn.conv2d(%162, meta[relay.Constant][127] /* ty=Tensor[(64, 1280, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %164 = nn.bias_add(%163, meta[relay.Constant][128] /* ty=Tensor[(64), float32] */) /* ty=Tensor[(1, 64, 8, 8), float32] */;
  %165 = nn.conv2d(%96, meta[relay.Constant][129] /* ty=Tensor[(64, 112, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 64, 16, 16), float32] */;
  %166 = image.resize2d(%164, size=[16, 16], rounding_method="floor", cubic_alpha=-0.75f) /* ty=Tensor[(1, 64, 16, 16), float32] */;
  %167 = nn.bias_add(%165, meta[relay.Constant][130] /* ty=Tensor[(64), float32] */) /* ty=Tensor[(1, 64, 16, 16), float32] */;
  %168 = add(%166, %167) /* ty=Tensor[(1, 64, 16, 16), float32] */;
  %169 = nn.conv2d(%168, meta[relay.Constant][131] /* ty=Tensor[(64, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=64, kernel_size=[3, 3]) /* ty=Tensor[(1, 64, 16, 16), float32] */;
  %170 = nn.conv2d(%169, meta[relay.Constant][132] /* ty=Tensor[(32, 64, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %171 = nn.bias_add(%170, meta[relay.Constant][133] /* ty=Tensor[(32), float32] */) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %172 = nn.batch_norm(%171, meta[relay.Constant][134] /* ty=Tensor[(32), float32] */, meta[relay.Constant][135] /* ty=Tensor[(32), float32] */, meta[relay.Constant][136] /* ty=Tensor[(32), float32] */, meta[relay.Constant][137] /* ty=Tensor[(32), float32] */, epsilon=0.001f) /* ty=(Tensor[(1, 32, 16, 16), float32], Tensor[(32), float32], Tensor[(32), float32]) */;
  %173 = %172.0;
  %174 = nn.relu(%173) /* ty=Tensor[(1, 32, 16, 16), float32] */;
  %175 = nn.conv2d(%60, meta[relay.Constant][138] /* ty=Tensor[(32, 56, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 32, 32, 32), float32] */;
  %176 = image.resize2d(%174, size=[32, 32], rounding_method="floor", cubic_alpha=-0.75f) /* ty=Tensor[(1, 32, 32, 32), float32] */;
  %177 = nn.bias_add(%175, meta[relay.Constant][139] /* ty=Tensor[(32), float32] */) /* ty=Tensor[(1, 32, 32, 32), float32] */;
  %178 = add(%176, %177) /* ty=Tensor[(1, 32, 32, 32), float32] */;
  %179 = nn.conv2d(%178, meta[relay.Constant][140] /* ty=Tensor[(32, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=32, kernel_size=[3, 3]) /* ty=Tensor[(1, 32, 32, 32), float32] */;
  %180 = nn.conv2d(%179, meta[relay.Constant][141] /* ty=Tensor[(24, 32, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %181 = nn.bias_add(%180, meta[relay.Constant][142] /* ty=Tensor[(24), float32] */) /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %182 = nn.batch_norm(%181, meta[relay.Constant][143] /* ty=Tensor[(24), float32] */, meta[relay.Constant][144] /* ty=Tensor[(24), float32] */, meta[relay.Constant][145] /* ty=Tensor[(24), float32] */, meta[relay.Constant][146] /* ty=Tensor[(24), float32] */, epsilon=0.001f) /* ty=(Tensor[(1, 24, 32, 32), float32], Tensor[(24), float32], Tensor[(24), float32]) */;
  %183 = %182.0;
  %184 = nn.relu(%183) /* ty=Tensor[(1, 24, 32, 32), float32] */;
  %185 = nn.conv2d(%33, meta[relay.Constant][147] /* ty=Tensor[(24, 40, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 24, 64, 64), float32] */;
  %186 = image.resize2d(%184, size=[64, 64], rounding_method="floor", cubic_alpha=-0.75f) /* ty=Tensor[(1, 24, 64, 64), float32] */;
  %187 = nn.bias_add(%185, meta[relay.Constant][148] /* ty=Tensor[(24), float32] */) /* ty=Tensor[(1, 24, 64, 64), float32] */;
  %188 = add(%186, %187) /* ty=Tensor[(1, 24, 64, 64), float32] */;
  %189 = nn.conv2d(%188, meta[relay.Constant][149] /* ty=Tensor[(24, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=24, kernel_size=[3, 3]) /* ty=Tensor[(1, 24, 64, 64), float32] */;
  %190 = nn.conv2d(%189, meta[relay.Constant][150] /* ty=Tensor[(24, 24, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 24, 64, 64), float32] */;
  %191 = nn.bias_add(%190, meta[relay.Constant][151] /* ty=Tensor[(24), float32] */) /* ty=Tensor[(1, 24, 64, 64), float32] */;
  %192 = nn.batch_norm(%191, meta[relay.Constant][152] /* ty=Tensor[(24), float32] */, meta[relay.Constant][153] /* ty=Tensor[(24), float32] */, meta[relay.Constant][154] /* ty=Tensor[(24), float32] */, meta[relay.Constant][155] /* ty=Tensor[(24), float32] */, epsilon=0.001f) /* ty=(Tensor[(1, 24, 64, 64), float32], Tensor[(24), float32], Tensor[(24), float32]) */;
  %193 = %192.0;
  %194 = nn.relu(%193) /* ty=Tensor[(1, 24, 64, 64), float32] */;
  %195 = nn.conv2d(%194, meta[relay.Constant][156] /* ty=Tensor[(24, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=24, kernel_size=[3, 3]) /* ty=Tensor[(1, 24, 64, 64), float32] */;
  %196 = nn.conv2d(%195, meta[relay.Constant][157] /* ty=Tensor[(96, 24, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %197 = nn.bias_add(%196, meta[relay.Constant][158] /* ty=Tensor[(96), float32] */) /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %198 = nn.relu(%197) /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %199 = nn.conv2d(%198, meta[relay.Constant][159] /* ty=Tensor[(17, 96, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 17, 64, 64), float32] */;
  %200 = nn.bias_add(%199, meta[relay.Constant][160] /* ty=Tensor[(17), float32] */) /* ty=Tensor[(1, 17, 64, 64), float32] */;
  %201 = sigmoid(%200) /* ty=Tensor[(1, 17, 64, 64), float32] */;
  %202 = nn.conv2d(%194, meta[relay.Constant][162] /* ty=Tensor[(24, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=24, kernel_size=[3, 3]) /* ty=Tensor[(1, 24, 64, 64), float32] */;
  %203 = nn.conv2d(%202, meta[relay.Constant][163] /* ty=Tensor[(96, 24, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %204 = nn.bias_add(%203, meta[relay.Constant][164] /* ty=Tensor[(96), float32] */) /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %205 = nn.relu(%204) /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %206 = nn.conv2d(%205, meta[relay.Constant][165] /* ty=Tensor[(1, 96, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 1, 64, 64), float32] */;
  %207 = nn.bias_add(%206, meta[relay.Constant][166] /* ty=Tensor[(1), float32] */) /* ty=Tensor[(1, 1, 64, 64), float32] */;
  %208 = sigmoid(%207) /* ty=Tensor[(1, 1, 64, 64), float32] */;
  %209 = reshape(%208, newshape=[1, 64, 64, 1]) /* ty=Tensor[(1, 64, 64, 1), float32] */;
  %210 = multiply(%209, meta[relay.Constant][167] /* ty=Tensor[(64, 64, 1), float32] */) /* ty=Tensor[(1, 64, 64, 1), float32] */;
  %211 = reshape(%210, newshape=[1, -1, 1]) /* ty=Tensor[(1, 4096, 1), float32] */;
  %212 = argmax(%211, axis=[1]) /* ty=Tensor[(1, 1), int32] */;
  %213 = cast(%212, dtype="int64") /* ty=Tensor[(1, 1), int64] */;
  %214 = cast(%213, dtype="int32") /* ty=Tensor[(1, 1), int32] */;
  %215 = divide(%214, 64 /* ty=int32 */) /* ty=Tensor[(1, 1), int32] */;
  %216 = nn.conv2d(%194, meta[relay.Constant][168] /* ty=Tensor[(24, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=24, kernel_size=[3, 3]) /* ty=Tensor[(1, 24, 64, 64), float32] */;
  %217 = nn.conv2d(%216, meta[relay.Constant][169] /* ty=Tensor[(96, 24, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %218 = nn.bias_add(%217, meta[relay.Constant][170] /* ty=Tensor[(96), float32] */) /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %219 = nn.relu(%218) /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %220 = nn.conv2d(%219, meta[relay.Constant][171] /* ty=Tensor[(34, 96, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 34, 64, 64), float32] */;
  %221 = nn.bias_add(%220, meta[relay.Constant][172] /* ty=Tensor[(34), float32] */) /* ty=Tensor[(1, 34, 64, 64), float32] */;
  %222 = reshape(%215, newshape=[-1]) /* ty=Tensor[(1), int32] */;
  %223 = multiply(%215, 64 /* ty=int32 */) /* ty=Tensor[(1, 1), int32] */;
  %224 = subtract(%214, %223) /* ty=Tensor[(1, 1), int32] */;
  %225 = reshape(%224, newshape=[-1]) /* ty=Tensor[(1), int32] */;
  %226 = expand_dims(%222, axis=1) /* ty=Tensor[(1, 1), int32] */;
  %227 = expand_dims(%225, axis=1) /* ty=Tensor[(1, 1), int32] */;
  %228 = (meta[relay.Constant][173] /* ty=Tensor[(1, 1), int32] */, %226, %227);
  %229 = concatenate(%228, axis=1) /* ty=Tensor[(1, 3), int32] */;
  %230 = cast(%229, dtype="int64") /* ty=Tensor[(1, 3), int64] */;
  %231 = transpose(%221, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 64, 64, 34), float32] */;
  %232 = transpose(%230, axes=[-1, 0]) /* ty=Tensor[(3, 1), int64] */;
  %233 = gather_nd(%231, %232, index_rank=3) /* ty=Tensor[(1, 34), float32] */;
  %234 = reshape(%233, newshape=[17, -1]) /* ty=Tensor[(17, 2), float32] */;
  %235 = split(%234, indices_or_sections=2, axis=1) /* ty=(Tensor[(17, 1), float32], Tensor[(17, 1), float32]) */;
  %236 = %235.0;
  %237 = cast(%215, dtype="float32") /* ty=Tensor[(1, 1), float32] */;
  %238 = squeeze(%236, axis=[1]) /* ty=Tensor[(17), float32] */;
  %239 = add(%237, %238) /* ty=Tensor[(1, 17), float32] */;
  %240 = subtract(meta[relay.Constant][161] /* ty=Tensor[(64, 64, 1), float32] */, %239) /* ty=Tensor[(64, 64, 17), float32] */;
  %241 = %235.1;
  %242 = cast(%224, dtype="float32") /* ty=Tensor[(1, 1), float32] */;
  %243 = squeeze(%241, axis=[1]) /* ty=Tensor[(17), float32] */;
  %244 = add(%242, %243) /* ty=Tensor[(1, 17), float32] */;
  %245 = subtract(meta[relay.Constant][174] /* ty=Tensor[(64, 64, 1), float32] */, %244) /* ty=Tensor[(64, 64, 17), float32] */;
  %246 = power(%240, 2f /* ty=float32 */) /* ty=Tensor[(64, 64, 17), float32] */;
  %247 = power(%245, 2f /* ty=float32 */) /* ty=Tensor[(64, 64, 17), float32] */;
  %248 = add(%246, %247) /* ty=Tensor[(64, 64, 17), float32] */;
  %249 = sqrt(%248) /* ty=Tensor[(64, 64, 17), float32] */;
  %250 = transpose(%201, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 64, 64, 17), float32] */;
  %251 = add(%249, 1.8f /* ty=float32 */) /* ty=Tensor[(64, 64, 17), float32] */;
  %252 = divide(%250, %251) /* ty=Tensor[(1, 64, 64, 17), float32] */;
  %253 = reshape(%252, newshape=[1, -1, 17]) /* ty=Tensor[(1, 4096, 17), float32] */;
  %254 = argmax(%253, axis=[1]) /* ty=Tensor[(1, 17), int32] */;
  %255 = cast(%254, dtype="int64") /* ty=Tensor[(1, 17), int64] */;
  %256 = cast(%255, dtype="int32") /* ty=Tensor[(1, 17), int32] */;
  %257 = divide(%256, 64 /* ty=int32 */) /* ty=Tensor[(1, 17), int32] */;
  %258 = nn.conv2d(%194, meta[relay.Constant][175] /* ty=Tensor[(24, 1, 3, 3), float32] */, padding=[1, 1, 1, 1], groups=24, kernel_size=[3, 3]) /* ty=Tensor[(1, 24, 64, 64), float32] */;
  %259 = nn.conv2d(%258, meta[relay.Constant][176] /* ty=Tensor[(96, 24, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %260 = nn.bias_add(%259, meta[relay.Constant][177] /* ty=Tensor[(96), float32] */) /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %261 = nn.relu(%260) /* ty=Tensor[(1, 96, 64, 64), float32] */;
  %262 = nn.conv2d(%261, meta[relay.Constant][178] /* ty=Tensor[(34, 96, 1, 1), float32] */, padding=[0, 0, 0, 0], kernel_size=[1, 1]) /* ty=Tensor[(1, 34, 64, 64), float32] */;
  %263 = nn.bias_add(%262, meta[relay.Constant][179] /* ty=Tensor[(34), float32] */) /* ty=Tensor[(1, 34, 64, 64), float32] */;
  %264 = reshape(%257, newshape=[-1]) /* ty=Tensor[(17), int32] */;
  %265 = multiply(%257, 64 /* ty=int32 */) /* ty=Tensor[(1, 17), int32] */;
  %266 = subtract(%256, %265) /* ty=Tensor[(1, 17), int32] */;
  %267 = reshape(%266, newshape=[-1]) /* ty=Tensor[(17), int32] */;
  %268 = expand_dims(%264, axis=1) /* ty=Tensor[(17, 1), int32] */;
  %269 = expand_dims(%267, axis=1) /* ty=Tensor[(17, 1), int32] */;
  %270 = (meta[relay.Constant][180] /* ty=Tensor[(17, 1), int32] */, %268, %269);
  %271 = concatenate(%270, axis=1) /* ty=Tensor[(17, 3), int32] */;
  %272 = cast(%271, dtype="int64") /* ty=Tensor[(17, 3), int64] */;
  %273 = transpose(%263, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 64, 64, 34), float32] */;
  %274 = transpose(%272, axes=[-1, 0]) /* ty=Tensor[(3, 17), int64] */;
  %275 = gather_nd(%273, %274, index_rank=3) /* ty=Tensor[(17, 34), float32] */;
  %276 = reshape(%275, newshape=[17, 17, -1]) /* ty=Tensor[(17, 17, 2), float32] */;
  %277 = gather_nd(%276, meta[relay.Constant][181] /* ty=Tensor[(2, 17), int64] */, index_rank=2) /* ty=Tensor[(17, 2), float32] */;
  %278 = split(%277, indices_or_sections=2, axis=1) /* ty=(Tensor[(17, 1), float32], Tensor[(17, 1), float32]) */;
  %279 = %278.0;
  %280 = squeeze(%279, axis=[1]) /* ty=Tensor[(17), float32] */;
  %281 = cast(%257, dtype="float32") /* ty=Tensor[(1, 17), float32] */;
  %282 = expand_dims(%280, axis=0) /* ty=Tensor[(1, 17), float32] */;
  %283 = add(%281, %282) /* ty=Tensor[(1, 17), float32] */;
  %284 = %278.1;
  %285 = squeeze(%284, axis=[1]) /* ty=Tensor[(17), float32] */;
  %286 = cast(%266, dtype="float32") /* ty=Tensor[(1, 17), float32] */;
  %287 = expand_dims(%285, axis=0) /* ty=Tensor[(1, 17), float32] */;
  %288 = add(%286, %287) /* ty=Tensor[(1, 17), float32] */;
  %289 = expand_dims(%283, axis=2) /* ty=Tensor[(1, 17, 1), float32] */;
  %290 = expand_dims(%288, axis=2) /* ty=Tensor[(1, 17, 1), float32] */;
  %291 = (%289, %290);
  %292 = concatenate(%291, axis=2) /* ty=Tensor[(1, 17, 2), float32] */;
  %293 = expand_dims(%292, axis=0) /* ty=Tensor[(1, 1, 17, 2), float32] */;
  %294 = (%271, meta[relay.Constant][183] /* ty=Tensor[(17, 1), int32] */);
  %295 = concatenate(%294, axis=1) /* ty=Tensor[(17, 4), int32] */;
  %296 = cast(%295, dtype="int64") /* ty=Tensor[(17, 4), int64] */;
  %297 = transpose(%296, axes=[-1, 0]) /* ty=Tensor[(4, 17), int64] */;
  %298 = gather_nd(%250, %297, index_rank=4) /* ty=Tensor[(17), float32] */;
  %299 = expand_dims(%298, axis=0) /* ty=Tensor[(1, 17), float32] */;
  %300 = expand_dims(%299, axis=0) /* ty=Tensor[(1, 1, 17), float32] */;
  %301 = multiply(%293, meta[relay.Constant][182] /* ty=Tensor[(1, 1, 1, 2), float32] */) /* ty=Tensor[(1, 1, 17, 2), float32] */;
  %302 = expand_dims(%300, axis=-1) /* ty=Tensor[(1, 1, 17, 1), float32] */;
  %303 = (%301, %302);
  concatenate(%303, axis=3) /* ty=Tensor[(1, 1, 17, 3), float32] */
}
